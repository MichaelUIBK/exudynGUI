{
    "NodePoint": {
        "referenceCoordinates": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\qv\\cRef = [q_0,\\,q_1,\\,q_2]\\tp\\cRef = \\pv\\cRef = [r_0,\\,r_1,\\,r_2]\\tp$reference coordinates of node, e.g. ref. coordinates for finite elements; global position of node without displacement",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cRef = [q_0,\\,q_1,\\,q_2]\\tp\\cRef = \\pv\\cRef = [r_0,\\,r_1,\\,r_2]\\tp"
        },
        "initialCoordinates": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\qv\\cIni = [q_0,\\,q_1,\\,q_2]\\cIni\\tp = \\uv\\cIni = [u_0,\\,u_1,\\,u_2]\\cIni\\tp$initial displacement coordinate",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cIni = [q_0,\\,q_1,\\,q_2]\\cIni\\tp = \\uv\\cIni = [u_0,\\,u_1,\\,u_2]\\cIni\\tp"
        },
        "initialVelocities": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\dot\\qv\\cIni = \\vv\\cIni = [\\dot q_0,\\,\\dot q_1,\\,\\dot q_2]\\cIni\\tp$initial velocity coordinate",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot\\qv\\cIni = \\vv\\cIni = [\\dot q_0,\\,\\dot q_1,\\,\\dot q_2]\\cIni\\tp"
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size (diameter, dimensions of underlying cube, etc.)  for item; size == -1.f means that default size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Default RGBA color for nodes; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "NodePoint2D": {
        "referenceCoordinates": {
            "type": "Vector2D",
            "default": "Vector2D({0.,0.})",
            "defaultStr": "\"Vector2D({0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\qv\\cRef = [q_0,\\,q_1]\\tp\\cRef = \\pv\\cRef = [r_0,\\,r_1]\\tp$reference coordinates of node ==> e.g. ref. coordinates for finite elements; global position of node without displacement",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cRef = [q_0,\\,q_1]\\tp\\cRef = \\pv\\cRef = [r_0,\\,r_1]\\tp"
        },
        "initialCoordinates": {
            "type": "Vector2D",
            "default": "Vector2D({0.,0.})",
            "defaultStr": "\"Vector2D({0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\qv\\cIni = [q_0,\\,q_1]\\cIni\\tp = [u_0,\\,u_1]\\cIni\\tp$initial displacement coordinate",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cIni = [q_0,\\,q_1]\\cIni\\tp = [u_0,\\,u_1]\\cIni\\tp"
        },
        "initialVelocities": {
            "type": "Vector2D",
            "default": "Vector2D({0.,0.})",
            "defaultStr": "\"Vector2D({0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\dot\\qv\\cIni = \\vv\\cIni = [\\dot q_0,\\,\\dot q_1]\\cIni\\tp$initial velocity coordinate",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot\\qv\\cIni = \\vv\\cIni = [\\dot q_0,\\,\\dot q_1]\\cIni\\tp"
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size (diameter, dimensions of underlying cube, etc.)  for item; size == -1.f means that default size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Default RGBA color for nodes; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "NodeRigidBodyEP": {
        "referenceCoordinates": {
            "type": "Vector7D",
            "default": "Vector7D({0.,0.,0., 0.,0.,0.,0.})",
            "defaultStr": "\"Vector7D({0.,0.,0., 0.,0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\qv\\cRef = [q_0,\\,q_1,\\,q_2,\\,\\psi_0,\\,\\psi_1,\\,\\psi_2,\\,\\psi_3]\\tp\\cRef = [\\pv\\tp\\cRef,\\,\\tpsi\\tp\\cRef]\\tp$reference coordinates (3 position coordinates and 4 Euler parameters) of node ==> e.g. ref. coordinates for finite elements or reference position of rigid body (e.g. for definition of joints)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cRef = [q_0,\\,q_1,\\,q_2,\\,\\psi_0,\\,\\psi_1,\\,\\psi_2,\\,\\psi_3]\\tp\\cRef = [\\pv\\tp\\cRef,\\,\\tpsi\\tp\\cRef]\\tp"
        },
        "initialCoordinates": {
            "type": "Vector7D",
            "default": "Vector7D({0.,0.,0., 0.,0.,0.,0.})",
            "defaultStr": "\"Vector7D({0.,0.,0., 0.,0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\qv\\cIni = [q_0,\\,q_1,\\,q_2,\\,\\psi_0,\\,\\psi_1,\\,\\psi_2,\\,\\psi_3]\\tp\\cIni = [\\uv\\tp\\cIni,\\,\\tpsi\\tp\\cIni]\\tp$initial displacement coordinates and 4 Euler parameters relative to reference coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cIni = [q_0,\\,q_1,\\,q_2,\\,\\psi_0,\\,\\psi_1,\\,\\psi_2,\\,\\psi_3]\\tp\\cIni = [\\uv\\tp\\cIni,\\,\\tpsi\\tp\\cIni]\\tp"
        },
        "initialVelocities": {
            "type": "Vector7D",
            "default": "Vector7D({0.,0.,0., 0.,0.,0.,0.})",
            "defaultStr": "\"Vector7D({0.,0.,0., 0.,0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\dot \\qv\\cIni = [\\dot q_0,\\,\\dot q_1,\\,\\dot q_2,\\,\\dot \\psi_0,\\,\\dot \\psi_1,\\,\\dot \\psi_2,\\,\\dot \\psi_3]\\tp\\cIni = [\\dot \\uv\\tp\\cIni,\\,\\dot \\tpsi\\tp\\cIni]\\tp$initial velocity coordinates: time derivatives of initial displacements and Euler parameters",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot \\qv\\cIni = [\\dot q_0,\\,\\dot q_1,\\,\\dot q_2,\\,\\dot \\psi_0,\\,\\dot \\psi_1,\\,\\dot \\psi_2,\\,\\dot \\psi_3]\\tp\\cIni = [\\dot \\uv\\tp\\cIni,\\,\\dot \\tpsi\\tp\\cIni]\\tp"
        },
        "addConstraintEquation": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "True: automatically add Euler parameter constraint for node; False: Euler parameter constraint is not added, must be done manually (e.g., with CoordinateVectorConstraint)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size (diameter, dimensions of underlying cube, etc.)  for item; size == -1.f means that default size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Default RGBA color for nodes; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "NodeRigidBodyRxyz": {
        "referenceCoordinates": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0., 0.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0., 0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\qv\\cRef = [q_0,\\,q_1,\\,q_2,\\,\\psi_0,\\,\\psi_1,\\,\\psi_2]\\tp\\cRef = [\\pv\\tp\\cRef,\\,\\tpsi\\tp\\cRef]\\tp$reference coordinates (3 position and 3 xyz Euler angles) of node ==> e.g. ref. coordinates for finite elements or reference position of rigid body (e.g. for definition of joints)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cRef = [q_0,\\,q_1,\\,q_2,\\,\\psi_0,\\,\\psi_1,\\,\\psi_2]\\tp\\cRef = [\\pv\\tp\\cRef,\\,\\tpsi\\tp\\cRef]\\tp"
        },
        "initialCoordinates": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0., 0.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0., 0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\qv\\cIni = [q_0,\\,q_1,\\,q_2,\\,\\psi_0,\\,\\psi_1,\\,\\psi_2]\\tp\\cIni = [\\uv\\tp\\cIni,\\,\\tpsi\\tp\\cIni]\\tp$initial displacement coordinates: ux,uy,uz and 3 Euler angles (xyz) relative to reference coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cIni = [q_0,\\,q_1,\\,q_2,\\,\\psi_0,\\,\\psi_1,\\,\\psi_2]\\tp\\cIni = [\\uv\\tp\\cIni,\\,\\tpsi\\tp\\cIni]\\tp"
        },
        "initialVelocities": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0., 0.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0., 0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\dot \\qv\\cIni = [\\dot q_0,\\,\\dot q_1,\\,\\dot q_2,\\,\\dot \\psi_0,\\,\\dot \\psi_1,\\,\\dot \\psi_2]\\tp\\cIni = [\\dot \\uv\\tp\\cIni,\\,\\dot \\tpsi\\tp\\cIni]\\tp$initial velocity coordinate: time derivatives of ux,uy,uz and of 3 Euler angles (xyz)",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot \\qv\\cIni = [\\dot q_0,\\,\\dot q_1,\\,\\dot q_2,\\,\\dot \\psi_0,\\,\\dot \\psi_1,\\,\\dot \\psi_2]\\tp\\cIni = [\\dot \\uv\\tp\\cIni,\\,\\dot \\tpsi\\tp\\cIni]\\tp"
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size (diameter, dimensions of underlying cube, etc.)  for item; size == -1.f means that default size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Default RGBA color for nodes; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "NodeRigidBodyRotVecLG": {
        "referenceCoordinates": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0., 0.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0., 0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\qv\\cRef = [q_0,\\,q_1,\\,q_2,\\,\nu_0,\\,\nu_1,\\,\nu_2]\\tp\\cRef = [\\pv\\tp\\cRef,\\,\\tnu\\tp\\cRef]\\tp$reference coordinates (position and rotation vector $\\tnu$) of node ==> e.g. ref. coordinates for finite elements or reference position of rigid body (e.g. for definition of joints)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "reference coordinates (position and rotation vector "
        },
        "initialCoordinates": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0., 0.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0., 0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\qv\\cIni = [q_0,\\,q_1,\\,q_2,\\,\nu_0,\\,\nu_1,\\,\nu_2]\\tp\\cIni = [\\uv\\tp\\cIni,\\,\\tnu\\tp\\cIni]\\tp$initial displacement coordinates $\\uv$ and rotation vector $\\tnu$ relative to reference coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "initial displacement coordinates "
        },
        "initialVelocities": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0., 0.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0., 0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\dot \\qv\\cIni = [\\dot q_0,\\,\\dot q_1,\\,\\dot q_2,\\,\\dot \nu_0,\\,\\dot \nu_1,\\,\\dot \nu_2]\\tp\\cIni = [\\dot \\uv\\tp\\cIni,\\,\\dot \\tnu\\tp\\cIni]\\tp$initial velocity coordinate: time derivatives of displacement and angular velocity vector",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size (diameter, dimensions of underlying cube, etc.)  for item; size == -1.f means that default size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Default RGBA color for nodes; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "NodeRigidBody2D": {
        "referenceCoordinates": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\qv\\cRef = [q_0,\\,q_1,\\,\\psi_0]\\tp\\cRef$reference coordinates (x-pos,y-pos and rotation) of node ==> e.g. ref. coordinates for finite elements; global position of node without displacement",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cRef = [q_0,\\,q_1,\\,\\psi_0]\\tp\\cRef"
        },
        "initialCoordinates": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\qv\\cIni = [q_0,\\,q_1,\\,\\psi_0]\\tp\\cIni$initial displacement coordinates and angle (relative to reference coordinates)",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cIni = [q_0,\\,q_1,\\,\\psi_0]\\tp\\cIni"
        },
        "initialVelocities": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\dot \\qv\\cIni = [\\dot q_0,\\,\\dot q_1,\\,\\dot \\psi_0]\\tp\\cIni =  [v_0,\\,v_1,\\,\\omega_2]\\tp\\cIni$initial velocity coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot \\qv\\cIni = [\\dot q_0,\\,\\dot q_1,\\,\\dot \\psi_0]\\tp\\cIni =  [v_0,\\,v_1,\\,\\omega_2]\\tp\\cIni"
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size (diameter, dimensions of underlying cube, etc.)  for item; size == -1.f means that default size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Default RGBA color for nodes; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "Node1D": {
        "referenceCoordinates": {
            "type": "Vector",
            "default": "Vector({0.})",
            "defaultStr": "\"Vector({0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[q_0]\\tp\\cRef$reference coordinate of node (in vector form)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[q_0]\\tp\\cRef"
        },
        "initialCoordinates": {
            "type": "Vector",
            "default": "Vector({0.})",
            "defaultStr": "\"Vector({0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$[q_0]\\tp\\cIni$initial displacement coordinate (in vector form)",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[q_0]\\tp\\cIni"
        },
        "initialVelocities": {
            "type": "Vector",
            "default": "Vector({0.})",
            "defaultStr": "\"Vector({0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$[\\dot q_0]\\tp\\cIni$initial velocity coordinate (in vector form)",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[\\dot q_0]\\tp\\cIni"
        }
    },
    "NodePoint2DSlope1": {
        "referenceCoordinates": {
            "type": "Vector4D",
            "default": "Vector4D({0.,0.,1.,0.})",
            "defaultStr": "\"Vector4D({0.,0.,1.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "reference coordinates (x-pos,y-pos; x-slopex, y-slopex) of node; global position of node without displacement",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "initialCoordinates": {
            "type": "Vector4D",
            "default": "Vector4D({0.,0.,0.,0.})",
            "defaultStr": "\"Vector4D({0.,0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "initial displacement coordinates: ux, uy and x/y 'displacements' of slopex",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "initialVelocities": {
            "type": "Vector4D",
            "default": "Vector4D({0.,0.,0.,0.})",
            "defaultStr": "\"Vector4D({0.,0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "initial velocity coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size (diameter, dimensions of underlying cube, etc.)  for item; size == -1.f means that default size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Default RGBA color for nodes; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "NodePointSlope1": {
        "referenceCoordinates": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0.,1.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0.,1.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "reference coordinates (x-pos,y-pos,z-pos; x-slopex, y-slopex, z-slopex) of node; global position of node without displacement",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "initialCoordinates": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0.,0.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0.,0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "initial displacement coordinates: ux, uy, uz and x/y/z 'displacements' of slopex",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "initialVelocities": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0.,0.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0.,0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "initial velocity coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size (diameter, dimensions of underlying cube, etc.)  for item; size == -1.f means that default size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Default RGBA color for nodes; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "NodePointSlope12": {
        "referenceCoordinates": {
            "type": "Vector9D",
            "default": "Vector9D({0.,0.,0.,1.,0.,0.,1.,0.,0.})",
            "defaultStr": "\"Vector9D({0.,0.,0.,1.,0.,0.,1.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "reference coordinates (x-pos,y-pos,z-pos; x-slopeX, y-slopeX, z-slopeX; x-slopeY, y-slopeY, z-slopeY) of node; global position of node without displacement",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "initialCoordinates": {
            "type": "Vector9D",
            "default": "Vector9D({0.,0.,0.,0.,0.,0.,0.,0.,0.})",
            "defaultStr": "\"Vector9D({0.,0.,0.,0.,0.,0.,0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "initial displacement coordinates relative to reference coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "initialVelocities": {
            "type": "Vector9D",
            "default": "Vector9D({0.,0.,0.,0.,0.,0.,0.,0.,0.})",
            "defaultStr": "\"Vector9D({0.,0.,0.,0.,0.,0.,0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "initial velocity coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size (diameter, dimensions of underlying cube, etc.)  for item; size == -1.f means that default size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Default RGBA color for nodes; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "NodePointSlope23": {
        "referenceCoordinates": {
            "type": "Vector9D",
            "default": "Vector9D({0.,0.,0.,1.,0.,0.,1.,0.,0.})",
            "defaultStr": "\"Vector9D({0.,0.,0.,1.,0.,0.,1.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "reference coordinates (x-pos,y-pos,z-pos; x-slopey, y-slopey, z-slopey; x-slopez, y-slopez, z-slopez) of node; global position of node without displacement",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "initialCoordinates": {
            "type": "Vector9D",
            "default": "Vector9D({0.,0.,0.,0.,0.,0.,0.,0.,0.})",
            "defaultStr": "\"Vector9D({0.,0.,0.,0.,0.,0.,0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "initial displacement coordinates relative to reference coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "initialVelocities": {
            "type": "Vector9D",
            "default": "Vector9D({0.,0.,0.,0.,0.,0.,0.,0.,0.})",
            "defaultStr": "\"Vector9D({0.,0.,0.,0.,0.,0.,0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "initial velocity coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size (diameter, dimensions of underlying cube, etc.)  for item; size == -1.f means that default size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Default RGBA color for nodes; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "NodeGenericODE2": {
        "referenceCoordinates": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\qv\\cRef = [q_0,\\,\\ldots,\\,q_{nc}]\\tp\\cRef$generic reference coordinates of node; must be consistent with numberOfODE2Coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cRef = [q_0,\\,\\ldots,\\,q_{nc}]\\tp\\cRef"
        },
        "initialCoordinates": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\qv\\cIni = [q_0,\\,\\ldots,\\,q_{nc}]\\tp\\cIni$initial displacement coordinates; must be consistent with numberOfODE2Coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cIni = [q_0,\\,\\ldots,\\,q_{nc}]\\tp\\cIni"
        },
        "initialCoordinates_t": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\dot \\qv\\cIni = [\\dot q_0,\\,\\ldots,\\,\\dot q_{n_c}]\\tp\\cIni$initial velocity coordinates; must be consistent with numberOfODE2Coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot \\qv\\cIni = [\\dot q_0,\\,\\ldots,\\,\\dot q_{n_c}]\\tp\\cIni"
        },
        "numberOfODE2Coordinates": {
            "type": "PInt",
            "default": 0,
            "defaultStr": "0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_c$number of generic \\hac{ODE2} coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "n_c"
        }
    },
    "NodeGenericODE1": {
        "referenceCoordinates": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\yv\\cRef = [y_0,\\,\\ldots,\\,y_{nc}]\\tp\\cRef$generic reference coordinates of node; must be consistent with numberOfODE1Coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\yv\\cRef = [y_0,\\,\\ldots,\\,y_{nc}]\\tp\\cRef"
        },
        "initialCoordinates": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\yv\\cIni = [y_0,\\,\\ldots,\\,y_{nc}]\\tp\\cIni$initial displacement coordinates; must be consistent with numberOfODE1Coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\yv\\cIni = [y_0,\\,\\ldots,\\,y_{nc}]\\tp\\cIni"
        },
        "numberOfODE1Coordinates": {
            "type": "PInt",
            "default": 0,
            "defaultStr": "0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_c$number of generic \\hac{ODE1} coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "n_c"
        }
    },
    "NodeGenericAE": {
        "referenceCoordinates": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\yv\\cRef = [y_0,\\,\\ldots,\\,y_{nc}]\\tp\\cRef$generic reference coordinates of node; must be consistent with numberOfAECoordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\yv\\cRef = [y_0,\\,\\ldots,\\,y_{nc}]\\tp\\cRef"
        },
        "initialCoordinates": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\yv\\cIni = [y_0,\\,\\ldots,\\,y_{nc}]\\tp\\cIni$initial displacement coordinates; must be consistent with numberOfAECoordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\yv\\cIni = [y_0,\\,\\ldots,\\,y_{nc}]\\tp\\cIni"
        },
        "numberOfAECoordinates": {
            "type": "PInt",
            "default": 0,
            "defaultStr": "0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_c$number of generic \\hac{AE} coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "n_c"
        }
    },
    "NodeGenericData": {
        "initialCoordinates": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\xv\\cIni = [x_0,\\,\\ldots,\\,x_{n_c}]\\tp\\cIni$initial data coordinates",
            "destination": "MP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\xv\\cIni = [x_0,\\,\\ldots,\\,x_{n_c}]\\tp\\cIni"
        },
        "numberOfDataCoordinates": {
            "type": "UInt",
            "default": 0,
            "defaultStr": "0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_c$number of generic data coordinates (history variables)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "n_c"
        }
    },
    "NodePointGround": {
        "referenceCoordinates": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\qv\\cRef = [q_0,\\,q_1,\\,q_2]\\tp\\cRef = \\pv\\cRef = [r_0,\\,r_1,\\,r_2]\\tp$reference coordinates of node ==> e.g. ref. coordinates for finite elements; global position of node without displacement",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\qv\\cRef = [q_0,\\,q_1,\\,q_2]\\tp\\cRef = \\pv\\cRef = [r_0,\\,r_1,\\,r_2]\\tp"
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size (diameter, dimensions of underlying cube, etc.)  for item; size == -1.f means that default size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Default RGBA color for nodes; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectGround": {
        "referencePosition": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\pRefG$reference point = reference position for ground object; local position is added on top of reference position for a ground object",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\pRefG"
        },
        "referenceRotation": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{0b}{\\Rot} \\in \\Rcal^{3 \\times 3}$the constant ground rotation matrix, which transforms body-fixed (b) to global (0) coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{0b}{\\Rot} \\in \\Rcal^{3 \\times 3}"
        },
        "graphicsDataUserFunction": {
            "type": "PyFunctionGraphicsData",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "A Python function which returns a bodyGraphicsData object, which is a list of graphics data in a dictionary computed by the user function",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "graphicsData": {
            "type": "BodyGraphicsData",
            "default": null,
            "defaultStr": "None",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Structure contains data for body visualization; data is defined in special list / dictionary structure",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectMassPoint": {
        "physicsMass": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$m$mass [SI:kg] of mass point",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "m"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n0$node number (type NodeIndex) for mass point",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n0"
        },
        "graphicsData": {
            "type": "BodyGraphicsData",
            "default": null,
            "defaultStr": "None",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Structure contains data for body visualization; data is defined in special list / dictionary structure",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectMassPoint2D": {
        "physicsMass": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$m$mass [SI:kg] of mass point",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "m"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n0$node number (type NodeIndex) for mass point",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n0"
        },
        "graphicsData": {
            "type": "BodyGraphicsData",
            "default": null,
            "defaultStr": "None",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Structure contains data for body visualization; data is defined in special list / dictionary structure",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectMass1D": {
        "physicsMass": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$m$mass [SI:kg] of mass",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "m"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n0$node number (type NodeIndex) for Node1D",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n0"
        },
        "referencePosition": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{0}{\\pRef_0}$a reference position, used to transform the 1D coordinate to a position",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{0}{\\pRef_0}"
        },
        "referenceRotation": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{0b}{\\Rot_{0}} \\in \\Rcal^{3 \\times 3}$the constant body rotation matrix, which transforms body-fixed (b) to global (0) coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{0b}{\\Rot_{0}} \\in \\Rcal^{3 \\times 3}"
        },
        "graphicsData": {
            "type": "BodyGraphicsData",
            "default": null,
            "defaultStr": "None",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Structure contains data for body visualization; data is defined in special list / dictionary structure",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectRotationalMass1D": {
        "physicsInertia": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$J$inertia components [SI:kgm$^2$] of rotor / rotational mass",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "J"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n0$node number (type NodeIndex) of Node1D, providing rotation coordinate $\\psi_0 = c_0$",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n0"
        },
        "referencePosition": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{0}{\\pRef_0}$a constant reference position = reference point, used to assign joint constraints accordingly and for drawing",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{0}{\\pRef_0}"
        },
        "referenceRotation": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{0i}{\\Rot_{0}} \\in \\Rcal^{3 \\times 3}$an intermediate rotation matrix, which transforms the 1D coordinate into 3D, see description",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{0i}{\\Rot_{0}} \\in \\Rcal^{3 \\times 3}"
        },
        "graphicsData": {
            "type": "BodyGraphicsData",
            "default": null,
            "defaultStr": "None",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Structure contains data for body visualization; data is defined in special list / dictionary structure",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectRigidBody": {
        "physicsMass": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$m$mass [SI:kg] of rigid body",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "m"
        },
        "physicsInertia": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0., 0.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0., 0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{b}{\\jv_6}$inertia components [SI:kgm$^2$]: $[J_{xx}, J_{yy}, J_{zz}, J_{yz}, J_{xz}, J_{xy}]$ in body-fixed coordinate system and w.r.t. to the reference point of the body, NOT necessarily w.r.t. to \\hac{COM}; use the class RigidBodyInertia of exudynRigidBodyUtilities.py and CreateRigidBody(...) of MainSystem to handle inertia, \\hac{COM} and mass",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\jv_6}"
        },
        "physicsCenterOfMass": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{b}{\\bv_{COM}}$local position of \\hac{COM} relative to the body's reference point; if the vector of the \\hac{COM} is [0,0,0], the computation will not consider additional terms for the \\hac{COM} and it is faster",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\bv_{COM}}"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n0$node number (type NodeIndex) for rigid body node",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n0"
        },
        "graphicsDataUserFunction": {
            "type": "PyFunctionGraphicsData",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "A Python function which returns a bodyGraphicsData object, which is a list of graphics data in a dictionary computed by the user function; the graphics elements need to be defined in the local body coordinates and are transformed by mbs to global coordinates",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "graphicsData": {
            "type": "BodyGraphicsData",
            "default": null,
            "defaultStr": "None",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Structure contains data for body visualization; data is defined in special list / dictionary structure",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectRigidBody2D": {
        "physicsMass": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$m$mass [SI:kg] of rigid body",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "m"
        },
        "physicsInertia": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$J$inertia [SI:kgm$^2$] of rigid body w.r.t. reference point; this is equal to the center of mass, if physicsCenterOfMass = 0",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "J"
        },
        "physicsCenterOfMass": {
            "type": "Vector2D",
            "default": "Vector2D({0.,0.})",
            "defaultStr": "\"Vector2D({0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{b}{\\bv_{COM}}$local position of \\hac{COM} relative to the body's reference point; if the vector of the \\hac{COM} is [0,0], the computation will not consider additional terms for the \\hac{COM} and it is faster",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\bv_{COM}}"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_0$node number (type NodeIndex) for 2D rigid body node",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_0"
        },
        "graphicsDataUserFunction": {
            "type": "PyFunctionGraphicsData",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "A Python function which returns a bodyGraphicsData object, which is a list of graphics data in a dictionary computed by the user function; the graphics elements need to be defined in the local body coordinates and are transformed by mbs to global coordinates",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "graphicsData": {
            "type": "BodyGraphicsData",
            "default": null,
            "defaultStr": "None",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Structure contains data for body visualization; data is defined in special list / dictionary structure",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectGenericODE2": {
        "nodeNumbers": {
            "type": "ArrayNodeIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mathbf{n}_n = [n_0,\\,\\ldots,\\,n_n]\\tp$node numbers which provide the coordinates for the object (consecutively as provided in this list)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "\\mathbf{n}_n = [n_0,\\,\\ldots,\\,n_n]\\tp"
        },
        "massMatrix": {
            "type": "PyMatrixContainer",
            "default": "PyMatrixContainer()",
            "defaultStr": "\"PyMatrixContainer()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Mm \\in \\Rcal^{n \\times n}$mass matrix of object as MatrixContainer (or numpy array / list of lists)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Mm \\in \\Rcal^{n \\times n}"
        },
        "stiffnessMatrix": {
            "type": "PyMatrixContainer",
            "default": "PyMatrixContainer()",
            "defaultStr": "\"PyMatrixContainer()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Km \\in \\Rcal^{n \\times n}$stiffness matrix of object as MatrixContainer (or numpy array / list of lists); NOTE that (dense/sparse triplets) format must agree with dampingMatrix and jacobianUserFunction",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Km \\in \\Rcal^{n \\times n}"
        },
        "dampingMatrix": {
            "type": "PyMatrixContainer",
            "default": "PyMatrixContainer()",
            "defaultStr": "\"PyMatrixContainer()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Dm \\in \\Rcal^{n \\times n}$damping matrix of object as MatrixContainer (or numpy array / list of lists); NOTE that (dense/sparse triplets) format must agree with stiffnessMatrix and jacobianUserFunction",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Dm \\in \\Rcal^{n \\times n}"
        },
        "forceVector": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\fv \\in \\Rcal^{n}$generalized force vector added to RHS",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\fv \\in \\Rcal^{n}"
        },
        "forceUserFunction": {
            "type": "PyFunctionVectorMbsScalarIndex2Vector",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\fv_{user} \\in \\Rcal^{n}$A Python user function which computes the generalized user force vector for the \\hac{ODE2} equations; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\fv_{user} \\in \\Rcal^{n}"
        },
        "massMatrixUserFunction": {
            "type": "PyFunctionMatrixContainerMbsScalarIndex2Vector",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\Mm_{user} \\in \\Rcal^{n\\times n}$A Python user function which computes the mass matrix instead of the constant mass matrix given in $\\Mm$; return numpy array or MatrixContainer; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Mm_{user} \\in \\Rcal^{n\\times n}"
        },
        "jacobianUserFunction": {
            "type": "PyFunctionMatrixContainerMbsScalarIndex2Vector2Scalar",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\Jm_{user} \\in \\Rcal^{n\\times n}$A Python user function which computes the jacobian, i.e., the derivative of the left-hand-side object equation w.r.t.\\ the coordinates (times $f_{ODE2}$) and w.r.t.\\ the velocities (times $f_{ODE2_t}$). Terms on the RHS must be subtracted from the LHS equation; the respective terms for the stiffness matrix and damping matrix are automatically added; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Jm_{user} \\in \\Rcal^{n\\times n}"
        },
        "coordinateIndexPerNode": {
            "type": "ArrayIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "this list contains the local coordinate index for every node, which is needed, e.g., for markers; the list is generated automatically every time parameters have been changed",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "tempCoordinates": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\cv_{temp} \\in \\Rcal^{n}$temporary vector containing coordinates",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\cv_{temp} \\in \\Rcal^{n}"
        },
        "tempCoordinates_t": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\dot \\cv_{temp} \\in \\Rcal^{n}$temporary vector containing velocity coordinates",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot \\cv_{temp} \\in \\Rcal^{n}"
        },
        "tempCoordinates_tt": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\ddot \\cv_{temp} \\in \\Rcal^{n}$temporary vector containing acceleration coordinates",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\ddot \\cv_{temp} \\in \\Rcal^{n}"
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA color for object; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "triangleMesh": {
            "type": "NumpyMatrixI",
            "default": "MatrixI()",
            "defaultStr": "\"MatrixI()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "a matrix, containg node number triples in every row, referring to the node numbers of the GenericODE2 object; the mesh uses the nodes to visualize the underlying object; contour plot colors are still computed in the local frame!",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "showNodes": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "set true, nodes are drawn uniquely via the mesh, eventually using the floating reference frame, even in the visualization of the node is show=False; node numbers are shown with indicator 'NF'",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "graphicsDataUserFunction": {
            "type": "PyFunctionGraphicsData",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "A Python function which returns a bodyGraphicsData object, which is a list of graphics data in a dictionary computed by the user function; the graphics data is draw in global coordinates; it can be used to implement user element visualization, e.g., beam elements or simple mechanical systems; note that this user function may significantly slow down visualization",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectGenericODE1": {
        "nodeNumbers": {
            "type": "ArrayNodeIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mathbf{n}_n = [n_0,\\,\\ldots,\\,n_n]\\tp$node numbers which provide the coordinates for the object (consecutively as provided in this list)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "\\mathbf{n}_n = [n_0,\\,\\ldots,\\,n_n]\\tp"
        },
        "systemMatrix": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\Am \\in \\Rcal^{n \\times n}$system matrix (state space matrix) of first order ODE",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Am \\in \\Rcal^{n \\times n}"
        },
        "rhsVector": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\fv \\in \\Rcal^{n}$a constant rhs vector (e.g., for constant input)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\fv \\in \\Rcal^{n}"
        },
        "rhsUserFunction": {
            "type": "PyFunctionVectorMbsScalarIndexVector",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\fv_{user} \\in \\Rcal^{n}$A Python user function which computes the right-hand-side (rhs) of the first order ODE; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\fv_{user} \\in \\Rcal^{n}"
        },
        "coordinateIndexPerNode": {
            "type": "ArrayIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "this list contains the local coordinate index for every node, which is needed, e.g., for markers; the list is generated automatically every time parameters have been changed",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "tempCoordinates": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\cv_{temp} \\in \\Rcal^{n}$temporary vector containing coordinates",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\cv_{temp} \\in \\Rcal^{n}"
        },
        "tempCoordinates_t": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\dot \\cv_{temp} \\in \\Rcal^{n}$temporary vector containing velocity coordinates",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot \\cv_{temp} \\in \\Rcal^{n}"
        }
    },
    "ObjectKinematicTree": {
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_0 \\in \\Ncal^n$node number (type NodeIndex) of GenericODE2 node containing the coordinates for the kinematic tree; $n$ being the number of minimal coordinates",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_0 \\in \\Ncal^n"
        },
        "gravity": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{0}{\\gv} \\in \\Rcal^{3}$gravity vector in inertial coordinates; used to simply apply gravity as LoadMassProportional is not available for KinematicTree",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{0}{\\gv} \\in \\Rcal^{3}"
        },
        "baseOffset": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{0}{\\pv_b} \\in \\Rcal^{3}$offset vector for base, in global coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{0}{\\pv_b} \\in \\Rcal^{3}"
        },
        "jointTypes": {
            "type": "JointTypeList",
            "default": "JointTypeList()",
            "defaultStr": "\"JointTypeList()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\jv_T \\in \\Ncal^{n}$joint types of kinematic Tree joints; must be always set",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\jv_T \\in \\Ncal^{n}"
        },
        "linkParents": {
            "type": "ArrayIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\iv_p = [p_0,\\, p_1,\\, \\ldots] \\in \\Ncal^{n}$index of parent joint/link; if no parent exists, the value is $-1$; by default, $p_0=-1$ because the $i$th parent index must always fulfill $p_i<i$; must be always set",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\iv_p = [p_0,\\, p_1,\\, \\ldots] \\in \\Ncal^{n}"
        },
        "jointTransformations": {
            "type": "Matrix3DList",
            "default": "Matrix3DList()",
            "defaultStr": "\"Matrix3DList()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Tm = [\\LU{p_0,j_0}{\\Tm_0},\\, \\LU{p_1,j_1}{\\Tm_1},\\, \\ldots ] \\in [\\Rcal^{3 \\times 3}, ...]$list of constant joint transformations from parent joint coordinates $p_0$ to this joint coordinates $j_0$; this allows to adjust the orientation of the joint axes (but it does not affect the joint offset); if no parent exists ($-1$), the base coordinate system $0$ is used; must be always set",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Tm = [\\LU{p_0,j_0}{\\Tm_0},\\, \\LU{p_1,j_1}{\\Tm_1},\\, \\ldots ] \\in [\\Rcal^{3 \\times 3}, ...]"
        },
        "jointOffsets": {
            "type": "Vector3DList",
            "default": "Vector3DList()",
            "defaultStr": "\"Vector3DList()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Vm = [\\LU{p_0}{o_0},\\, \\LU{p_1}{o_1},\\, \\ldots ] \\in [\\Rcal^{3}, ...]$list of constant joint offsets from parent joint to this joint; $p_0$, $p_1$, $\\ldots$ denote the parent coordinate systems; this means that the joint offset is added prior to performing the joint transformation; if no parent exists ($-1$), the base coordinate system $0$ is used; must be always set",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Vm = [\\LU{p_0}{o_0},\\, \\LU{p_1}{o_1},\\, \\ldots ] \\in [\\Rcal^{3}, ...]"
        },
        "linkInertiasCOM": {
            "type": "Matrix3DList",
            "default": "Matrix3DList()",
            "defaultStr": "\"Matrix3DList()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Jm_{COM} = [\\LU{j_0}{\\Jm_0},\\, \\LU{j_1}{\\Jm_1},\\, \\ldots ] \\in [\\Rcal^{3 \\times 3}, ...]$list of link inertia tensors w.r.t.\\ \\ac{COM} in joint/link $j_i$ coordinates; must be always set",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Jm_{COM} = [\\LU{j_0}{\\Jm_0},\\, \\LU{j_1}{\\Jm_1},\\, \\ldots ] \\in [\\Rcal^{3 \\times 3}, ...]"
        },
        "linkCOMs": {
            "type": "Vector3DList",
            "default": "Vector3DList()",
            "defaultStr": "\"Vector3DList()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Cm = [\\LU{j_0}{\\cv_0},\\, \\LU{j_1}{\\cv_1},\\, \\ldots ] \\in [\\Rcal^{3}, ...]$list of vectors for center of mass (COM) in joint/link $j_i$ coordinates; must be always set",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Cm = [\\LU{j_0}{\\cv_0},\\, \\LU{j_1}{\\cv_1},\\, \\ldots ] \\in [\\Rcal^{3}, ...]"
        },
        "linkMasses": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mv \\in \\Rcal^{n}$masses of links; must be always set",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mv \\in \\Rcal^{n}"
        },
        "linkForces": {
            "type": "Vector3DList",
            "default": "Vector3DList()",
            "defaultStr": "\"Vector3DList()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{0}{\\Fm} \\in [\\Rcal^{3}, ...]$list of 3D force vectors per link in global coordinates acting on joint frame origin; use force-torque couple to realize off-origin forces; defaults to empty list $[]$, adding no forces",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{0}{\\Fm} \\in [\\Rcal^{3}, ...]"
        },
        "linkTorques": {
            "type": "Vector3DList",
            "default": "Vector3DList()",
            "defaultStr": "\"Vector3DList()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{0}{\\Fm_\\tau} \\in [\\Rcal^{3}, ...]$list of 3D torque vectors per link in global coordinates; defaults to empty list $[]$, adding no torques",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{0}{\\Fm_\\tau} \\in [\\Rcal^{3}, ...]"
        },
        "jointForceVector": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\fv \\in \\Rcal^{n}$generalized force vector per coordinate added to RHS of EOM; represents a torque around the axis of rotation in revolute joints and a force in prismatic joints; for a revolute joint $i$, the torque $f[i]$ acts positive (w.r.t.\\ rotation axis) on link $i$ and negative on parent link $p_i$; must be either empty list/array $[]$ (default) or have size $n$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\fv \\in \\Rcal^{n}"
        },
        "jointPositionOffsetVector": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\uv_o \\in \\Rcal^{n}$offset for joint coordinates used in P(D) control; acts in positive joint direction similar to jointForceVector; should be modified, e.g., in preStepUserFunction; must be either empty list/array $[]$ (default) or have size $n$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\uv_o \\in \\Rcal^{n}"
        },
        "jointVelocityOffsetVector": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\vv_o \\in \\Rcal^{n}$velocity offset for joint coordinates used in (P)D control; acts in positive joint direction similar to jointForceVector; should be modified, e.g., in preStepUserFunction; must be either empty list/array $[]$ (default) or have size $n$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\vv_o \\in \\Rcal^{n}"
        },
        "jointPControlVector": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Pm \\in \\Rcal^{n}$proportional (P) control values per joint (multiplied with position error between joint value and offset $\\uv_o$); note that more complicated control laws must be implemented with user functions; must be either empty list/array $[]$ (default) or have size $n$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Pm \\in \\Rcal^{n}"
        },
        "jointDControlVector": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Dm \\in \\Rcal^{n}$derivative (D) control values per joint (multiplied with velocity error between joint velocity and velocity offset $\\vv_o$); note that more complicated control laws must be implemented with user functions; must be either empty list/array $[]$ (default) or have size $n$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Dm \\in \\Rcal^{n}"
        },
        "forceUserFunction": {
            "type": "PyFunctionVectorMbsScalarIndex2Vector",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\fv_{user} \\in \\Rcal^{n}$A Python user function which computes the generalized force vector on RHS with identical action as jointForceVector; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\fv_{user} \\in \\Rcal^{n}"
        },
        "showLinks": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "set true, if links shall be shown; if graphicsDataList is empty, a standard drawing for links is used (drawing a cylinder from previous joint or base to next joint; size relative to frame size in KinematicTree visualization settings); else graphicsDataList are used per link; NOTE visualization of joint and COM frames can be modified via visualizationSettings.bodies.kinematicTree",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "showJoints": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "set true, if joints shall be shown; if graphicsDataList is empty, a standard drawing for joints is used (drawing a cylinder for revolute joints; size relative to frame size in KinematicTree visualization settings)",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA color for object; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "graphicsDataList": {
            "type": "BodyGraphicsDataList",
            "default": null,
            "defaultStr": "None",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "Structure contains data for link/joint visualization; data is defined as list of BodyGraphicdData where every BodyGraphicdData corresponds to one link/joint; must either be emtpy list or length must agree with number of links",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectFFRF": {
        "nodeNumbers": {
            "type": "ArrayNodeIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mathbf{n}\\indf = [n_0,\\,\\ldots,\\,n_{n_\\mathrm{nf}}]\\tp$node numbers which provide the coordinates for the object (consecutively as provided in this list); the $(n_\\mathrm{nf}+1)$ nodes represent the nodes of the FE mesh (except for node 0); the global nodal position needs to be reconstructed from the rigid-body motion of the reference frame",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "\\mathbf{n}\\indf = [n_0,\\,\\ldots,\\,n_{n_\\mathrm{nf}}]\\tp"
        },
        "massMatrixFF": {
            "type": "PyMatrixContainer",
            "default": "PyMatrixContainer()",
            "defaultStr": "\"PyMatrixContainer()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{b}{\\Mm} \\in \\Rcal^{n\\indf \\times n\\indf}$body-fixed and ONLY flexible coordinates part of mass matrix of object given in Python numpy format (sparse (CSR) or dense, converted to sparse matrix); internally data is stored in triplet format",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\Mm} \\in \\Rcal^{n\\indf \\times n\\indf}"
        },
        "stiffnessMatrixFF": {
            "type": "PyMatrixContainer",
            "default": "PyMatrixContainer()",
            "defaultStr": "\"PyMatrixContainer()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{b}{\\Km} \\in \\Rcal^{n\\indf \\times n\\indf}$body-fixed and ONLY flexible coordinates part of stiffness matrix of object in Python numpy format (sparse (CSR) or dense, converted to sparse matrix); internally data is stored in triplet format",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\Km} \\in \\Rcal^{n\\indf \\times n\\indf}"
        },
        "dampingMatrixFF": {
            "type": "PyMatrixContainer",
            "default": "PyMatrixContainer()",
            "defaultStr": "\"PyMatrixContainer()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{b}{\\Dm} \\in \\Rcal^{n\\indf \\times n\\indf}$body-fixed and ONLY flexible coordinates part of damping matrix of object in Python numpy format (sparse (CSR) or dense, converted to sparse matrix); internally data is stored in triplet format",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\Dm} \\in \\Rcal^{n\\indf \\times n\\indf}"
        },
        "forceVector": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{0}{\\fv} = [\\LU{0}{\\fv\\indr},\\; \\LU{0}{\\fv\\indf}]\\tp \\in \\Rcal^{n_c}$generalized, force vector added to RHS; the rigid body part $\\fv_r$ is directly applied to rigid body coordinates while the flexible part $\\fv\\indf$ is transformed from global to local coordinates; note that this force vector only allows to add gravity forces for bodies with \\hac{COM} at the origin of the reference frame",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{0}{\\fv} = [\\LU{0}{\\fv\\indr},\\; \\LU{0}{\\fv\\indf}]\\tp \\in \\Rcal^{n_c}"
        },
        "forceUserFunction": {
            "type": "PyFunctionVectorMbsScalarIndex2Vector",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\fv_{user} =  [\\LU{0}{\\fv_{\\mathrm{r},user}},\\; \\LU{b}{\\fv_{\\mathrm{f},user}}]\\tp \\in \\Rcal^{n_c}$A Python user function which computes the generalized user force vector for the \\hac{ODE2} equations; note the different coordinate systems for rigid body and flexible part; The function args are mbs, time, objectNumber, coordinates q (without reference values) and coordinate velocities q\\_t; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\fv_{user} =  [\\LU{0}{\\fv_{\\mathrm{r},user}},\\; \\LU{b}{\\fv_{\\mathrm{f},user}}]\\tp \\in \\Rcal^{n_c}"
        },
        "massMatrixUserFunction": {
            "type": "PyFunctionMatrixMbsScalarIndex2Vector",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\Mm_{user} \\in \\Rcal^{n_c\\times n_c}$A Python user function which computes the TOTAL mass matrix (including reference node) and adds the local constant mass matrix; note the different coordinate systems as described in the \\hac{FFRF} mass matrix; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Mm_{user} \\in \\Rcal^{n_c\\times n_c}"
        },
        "computeFFRFterms": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag decides whether the standard \\hac{FFRF} terms are computed; use this flag for user-defined definition of \\hac{FFRF} terms in mass matrix and quadratic velocity vector",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "coordinateIndexPerNode": {
            "type": "ArrayIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "this list contains the local coordinate index for every node, which is needed, e.g., for markers; the list is generated automatically every time parameters have been changed",
            "destination": "C",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "objectIsInitialized": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "ALWAYS set to False! flag used to correctly initialize all \\hac{FFRF} matrices; as soon as this flag is False, internal (constant) \\hac{FFRF} matrices are recomputed during Assemble()",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "physicsMass": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$m$total mass [SI:kg] of \\hac{FFRF} object, auto-computed from mass matrix $\\LU{b}{\\Mm}$",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "m"
        },
        "physicsInertia": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$J_r \\in \\Rcal^{3 \\times 3}$inertia tensor [SI:kgm$^2$] of rigid body w.r.t. to the reference point of the body, auto-computed from the mass matrix $\\LU{b}{\\Mm}$",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "J_r \\in \\Rcal^{3 \\times 3}"
        },
        "physicsCenterOfMass": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\LU{b}{\\bv}_{COM}$local position of center of mass (\\hac{COM}); auto-computed from mass matrix $\\LU{b}{\\Mm}$",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\bv}_{COM}"
        },
        "PHItTM": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\tPhi\\indt\\tp \\in \\Rcal^{n\\indf \\times 3}$projector matrix; may be removed in future",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\tPhi\\indt\\tp \\in \\Rcal^{n\\indf \\times 3}"
        },
        "referencePositions": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\xv\\cRef \\in \\Rcal^{n\\indf}$vector containing the reference positions of all flexible nodes",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\xv\\cRef \\in \\Rcal^{n\\indf}"
        },
        "tempVector": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\vv_{temp} \\in \\Rcal^{n\\indf}$temporary vector",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\vv_{temp} \\in \\Rcal^{n\\indf}"
        },
        "tempCoordinates": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\cv_{temp} \\in \\Rcal^{n\\indf}$temporary vector containing coordinates",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\cv_{temp} \\in \\Rcal^{n\\indf}"
        },
        "tempCoordinates_t": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\dot \\cv_{temp} \\in \\Rcal^{n\\indf}$temporary vector containing velocity coordinates",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot \\cv_{temp} \\in \\Rcal^{n\\indf}"
        },
        "tempRefPosSkew": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\tilde\\pv\\indf \\in \\Rcal^{n\\indf \\times 3}$temporary matrix with skew symmetric local (deformed) node positions",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\tilde\\pv\\indf \\in \\Rcal^{n\\indf \\times 3}"
        },
        "tempVelSkew": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\dot{\\tilde\\cv}\\indf \\in \\Rcal^{n\\indf \\times 3}$temporary matrix with skew symmetric local node velocities",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot{\\tilde\\cv}\\indf \\in \\Rcal^{n\\indf \\times 3}"
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA color for object; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "triangleMesh": {
            "type": "NumpyMatrixI",
            "default": "MatrixI()",
            "defaultStr": "\"MatrixI()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "a matrix, containg node number triples in every row, referring to the node numbers of the GenericODE2 object; the mesh uses the nodes to visualize the underlying object; contour plot colors are still computed in the local frame!",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "showNodes": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "set true, nodes are drawn uniquely via the mesh, eventually using the floating reference frame, even in the visualization of the node is show=False; node numbers are shown with indicator 'NF'",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectFFRFreducedOrder": {
        "nodeNumbers": {
            "type": "ArrayNodeIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mathbf{n} = [n_0,\\,n_1]\\tp$node numbers of rigid body node and NodeGenericODE2 for modal coordinates; the global nodal position needs to be reconstructed from the rigid-body motion of the reference frame, the modal coordinates and the mode basis",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "\\mathbf{n} = [n_0,\\,n_1]\\tp"
        },
        "massMatrixReduced": {
            "type": "PyMatrixContainer",
            "default": "PyMatrixContainer()",
            "defaultStr": "\"PyMatrixContainer()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Mm\\indred \\in \\Rcal^{n_m \\times n_m}$body-fixed and ONLY flexible coordinates part of reduced mass matrix; provided as MatrixContainer(sparse/dense matrix)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Mm\\indred \\in \\Rcal^{n_m \\times n_m}"
        },
        "stiffnessMatrixReduced": {
            "type": "PyMatrixContainer",
            "default": "PyMatrixContainer()",
            "defaultStr": "\"PyMatrixContainer()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Km\\indred \\in \\Rcal^{n_m \\times n_m}$body-fixed and ONLY flexible coordinates part of reduced stiffness matrix; provided as MatrixContainer(sparse/dense matrix)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Km\\indred \\in \\Rcal^{n_m \\times n_m}"
        },
        "dampingMatrixReduced": {
            "type": "PyMatrixContainer",
            "default": "PyMatrixContainer()",
            "defaultStr": "\"PyMatrixContainer()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Dm\\indred \\in \\Rcal^{n_m \\times n_m}$body-fixed and ONLY flexible coordinates part of reduced damping matrix; provided as MatrixContainer(sparse/dense matrix)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Dm\\indred \\in \\Rcal^{n_m \\times n_m}"
        },
        "forceUserFunction": {
            "type": "PyFunctionVectorMbsScalarIndex2Vector",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\fv\\induser \\in \\Rcal^{n_{ODE2}}$A Python user function which computes the generalized user force vector for the \\hac{ODE2} equations; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\fv\\induser \\in \\Rcal^{n_{ODE2}}"
        },
        "massMatrixUserFunction": {
            "type": "PyFunctionMatrixMbsScalarIndex2Vector",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\Mm\\induser \\in \\Rcal^{n_{ODE2}\\times n_{ODE2}}$A Python user function which computes the TOTAL mass matrix (including reference node) and adds the local constant mass matrix; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Mm\\induser \\in \\Rcal^{n_{ODE2}\\times n_{ODE2}}"
        },
        "computeFFRFterms": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag decides whether the standard \\hac{FFRF}/\\hac{CMS} terms are computed; use this flag for user-defined definition of \\hac{FFRF} terms in mass matrix and quadratic velocity vector",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "modeBasis": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{b}{\\tPsi} \\in \\Rcal^{n\\indf \\times n_{m}}$mode basis, which transforms reduced coordinates to (full) nodal coordinates, written as a single vector $[u_{x,n_0},\\,u_{y,n_0},\\,u_{z,n_0},\\,\\ldots,\\,u_{x,n_n},\\,u_{y,n_n},\\,u_{z,n_n}]\\tp$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\tPsi} \\in \\Rcal^{n\\indf \\times n_{m}}"
        },
        "outputVariableModeBasis": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{b}{\\tPsi}_{OV} \\in \\Rcal^{n_n \\times (n_{m}\\cdot s_{OV})}$mode basis, which transforms reduced coordinates to output variables per mode and per node; $s_{OV}$ is the size of the output variable, e.g., 6 for stress modes ($S_{xx},...,S_{xy}$)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\tPsi}_{OV} \\in \\Rcal^{n_n \\times (n_{m}\\cdot s_{OV})}"
        },
        "outputVariableTypeModeBasis": {
            "type": "OutputVariableType",
            "default": "OutputVariableType::_None",
            "defaultStr": "\"OutputVariableType::_None\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "this must be the output variable type of the outputVariableModeBasis, e.g. exu.OutputVariableType.Stress",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "referencePositions": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{b}{\\xv}\\cRef \\in \\Rcal^{n\\indf}$vector containing the reference positions of all flexible nodes, needed for graphics",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\xv}\\cRef \\in \\Rcal^{n\\indf}"
        },
        "objectIsInitialized": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "ALWAYS set to False! flag used to correctly initialize all \\hac{FFRF} matrices; as soon as this flag is False, some internal (constant) \\hac{FFRF} matrices are recomputed during Assemble()",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "physicsMass": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$m$total mass [SI:kg] of FFRFreducedOrder object",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "m"
        },
        "physicsInertia": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Jm_r \\in \\Rcal^{3 \\times 3}$inertia tensor [SI:kgm$^2$] of rigid body w.r.t. to the reference point of the body",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Jm_r \\in \\Rcal^{3 \\times 3}"
        },
        "physicsCenterOfMass": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{b}{\\bv}_{COM}$local position of center of mass (\\hac{COM})",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\bv}_{COM}"
        },
        "mPsiTildePsi": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "special FFRFreducedOrder matrix, computed in ObjectFFRFreducedOrderInterface",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "mPsiTildePsiTilde": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "special FFRFreducedOrder matrix, computed in ObjectFFRFreducedOrderInterface",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "mPhitTPsi": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "special FFRFreducedOrder matrix, computed in ObjectFFRFreducedOrderInterface",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "mPhitTPsiTilde": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "special FFRFreducedOrder matrix, computed in ObjectFFRFreducedOrderInterface",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "mXRefTildePsi": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "special FFRFreducedOrder matrix, computed in ObjectFFRFreducedOrderInterface",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "mXRefTildePsiTilde": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "special FFRFreducedOrder matrix, computed in ObjectFFRFreducedOrderInterface",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "physicsCenterOfMassTilde": {
            "type": "Matrix3D",
            "default": "EXUmath::zeroMatrix3D",
            "defaultStr": "\"EXUmath::zeroMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{b}{\\tilde \\bv}_{COM}$tilde matrix from local position of \\hac{COM}; autocomputed during initialization",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{b}{\\tilde \\bv}_{COM}"
        },
        "tempUserFunctionForce": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\fv_{temp} \\in \\Rcal^{n_{ODE2}}$temporary vector for UF force",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\fv_{temp} \\in \\Rcal^{n_{ODE2}}"
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA color for object; 4th value is alpha-transparency; R=-1.f means, that default color is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "triangleMesh": {
            "type": "NumpyMatrixI",
            "default": "MatrixI()",
            "defaultStr": "\"MatrixI()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "a matrix, containg node number triples in every row, referring to the node numbers of the GenericODE2 object; the mesh uses the nodes to visualize the underlying object; contour plot colors are still computed in the local frame!",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "showNodes": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "set true, nodes are drawn uniquely via the mesh, eventually using the floating reference frame, even in the visualization of the node is show=False; node numbers are shown with indicator 'NF'",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectANCFCable": {
        "physicsLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$L$ [SI:m] reference length of beam; such that the total volume (e.g. for volume load) gives $\\rho A L$; must be positive",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "L"
        },
        "physicsMassPerLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\rho A$ [SI:kg/m] mass per length of beam",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\rho A"
        },
        "physicsBendingStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$EI$ [SI:Nm$^2$] bending stiffness of beam; the bending moment is $m = EI (\\kappa - \\kappa_0)$, in which $\\kappa$ is the material measure of curvature",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "EI"
        },
        "physicsAxialStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$EA$ [SI:N] axial stiffness of beam; the axial force is $f_{ax} = EA (\\varepsilon -\\varepsilon_0)$, in which $\\varepsilon = |\\rv^\\prime|-1$ is the axial strain",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "EA"
        },
        "physicsBendingDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_{K}$ [SI:Nm$^2$/s] bending damping of beam ; the additional virtual work due to damping is $\\delta W_{\\dot \\kappa} = \\int_0^L \\dot \\kappa \\delta \\kappa dx$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_{K}"
        },
        "physicsAxialDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_{\\varepsilon}$ [SI:N/s] axial damping of beam; the additional virtual work due to damping is $\\delta W_{\\dot\\varepsilon} = \\int_0^L \\dot \\varepsilon \\delta \\varepsilon dx$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_{\\varepsilon}"
        },
        "physicsReferenceAxialStrain": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\varepsilon_0$ [SI:1] reference axial strain of beam (pre-deformation) of beam; without external loading the beam will statically keep the reference axial strain value",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\varepsilon_0"
        },
        "strainIsRelativeToReference": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$f\\cRef$ if set to 1., a pre-deformed reference configuration is considered as the stressless state; if set to 0., the straight configuration plus the values of $\\varepsilon_0$ and $\\kappa_0$ serve as a reference geometry; allows also values between 0. and 1.",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f\\cRef"
        },
        "nodeNumbers": {
            "type": "NodeIndex2",
            "default": "Index2({EXUstd::InvalidIndex, EXUstd::InvalidIndex})",
            "defaultStr": "\"Index2({EXUstd::InvalidIndex, EXUstd::InvalidIndex})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "two node numbers ANCF cable element",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "useReducedOrderIntegration": {
            "type": "Index",
            "default": 0,
            "defaultStr": "0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "0/false: use Gauss order 9 integration for virtual work of axial forces, order 5 for virtual work of bending moments; 1/true: use Gauss order 7 integration for virtual work of axial forces, order 3 for virtual work of bending moments",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "radius": {
            "type": "float",
            "default": "0.f",
            "defaultStr": "\"0.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if radius==0, only the centerline is drawn; else, a cylinder with radius is drawn; circumferential tiling follows general.cylinderTiling and beam axis tiling follows bodies.beams.axialTiling",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA color of the object; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectANCFCable2D": {
        "physicsLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$L$ [SI:m] reference length of beam; such that the total volume (e.g. for volume load) gives $\\rho A L$; must be positive",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "L"
        },
        "physicsMassPerLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\rho A$ [SI:kg/m] mass per length of beam",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\rho A"
        },
        "physicsBendingStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$EI$ [SI:Nm$^2$] bending stiffness of beam; the bending moment is $m = EI (\\kappa - \\kappa_0)$, in which $\\kappa$ is the material measure of curvature",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "EI"
        },
        "physicsAxialStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$EA$ [SI:N] axial stiffness of beam; the axial force is $f_{ax} = EA (\\varepsilon -\\varepsilon_0)$, in which $\\varepsilon = |\\rv^\\prime|-1$ is the axial strain",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "EA"
        },
        "physicsBendingDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_{K}$ [SI:Nm$^2$/s] bending damping of beam ; the additional virtual work due to damping is $\\delta W_{\\dot \\kappa} = \\int_0^L \\dot \\kappa \\delta \\kappa dx$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_{K}"
        },
        "physicsAxialDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_{\\varepsilon}$ [SI:N/s] axial damping of beam; the additional virtual work due to damping is $\\delta W_{\\dot\\varepsilon} = \\int_0^L \\dot \\varepsilon \\delta \\varepsilon dx$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_{\\varepsilon}"
        },
        "physicsReferenceAxialStrain": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\varepsilon_0$ [SI:1] reference axial strain of beam (pre-deformation) of beam; without external loading the beam will statically keep the reference axial strain value",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\varepsilon_0"
        },
        "physicsReferenceCurvature": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\kappa_0$ [SI:1/m] reference curvature of beam (pre-deformation) of beam; without external loading the beam will statically keep the reference curvature value",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\kappa_0"
        },
        "strainIsRelativeToReference": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$f\\cRef$ if set to 1., a pre-deformed reference configuration is considered as the stressless state; if set to 0., the straight configuration plus the values of $\\varepsilon_0$ and $\\kappa_0$ serve as a reference geometry; allows also values between 0. and 1.",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f\\cRef"
        },
        "nodeNumbers": {
            "type": "NodeIndex2",
            "default": "Index2({EXUstd::InvalidIndex, EXUstd::InvalidIndex})",
            "defaultStr": "\"Index2({EXUstd::InvalidIndex, EXUstd::InvalidIndex})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "two node numbers ANCF cable element",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "useReducedOrderIntegration": {
            "type": "Index",
            "default": 0,
            "defaultStr": "0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "0/false: use Gauss order 9 integration for virtual work of axial forces, order 5 for virtual work of bending moments; 1/True: use Gauss order 7 integration for virtual work of axial forces, order 3 for virtual work of bending moments; 2: use mixed Lobatto/Gauss integration with exceptional quality of axial strain, however, spurious (hourglass) modes may occur!",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "axialForceUserFunction": {
            "type": "PyFunctionMbsScalarIndexScalar9",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal$A Python function which defines the (nonlinear relations) of local strains (including axial strain and bending strain) as well as time derivatives to the local axial force; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal"
        },
        "bendingMomentUserFunction": {
            "type": "PyFunctionMbsScalarIndexScalar9",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal$A Python function which defines the (nonlinear relations) of local strains (including axial strain and bending strain) as well as time derivatives to the local bending moment; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal"
        },
        "drawHeight": {
            "type": "float",
            "default": "0.f",
            "defaultStr": "\"0.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if beam is drawn with rectangular shape, this is the drawing height",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA color of the object; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectALEANCFCable2D": {
        "physicsLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$L$ [SI:m] reference length of beam; such that the total volume (e.g. for volume load) gives $\\rho A L$; must be positive",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "L"
        },
        "physicsMassPerLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\rho A$ [SI:kg/m] total mass per length of beam (including axially moving parts / fluid)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\rho A"
        },
        "physicsMovingMassFactor": {
            "type": "UReal",
            "default": 1.0,
            "defaultStr": "1.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "this factor denotes the amount of $\\rho A$ which is moving; physicsMovingMassFactor=1 means, that all mass is moving; physicsMovingMassFactor=0 means, that no mass is moving; factor can be used to simulate e.g. pipe conveying fluid, in which $\\rho A$ is the mass of the pipe+fluid, while $physicsMovingMassFactor \\cdot \\rho A$ is the mass per unit length of the fluid",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\rho A"
        },
        "physicsBendingStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$EI$ [SI:Nm$^2$] bending stiffness of beam; the bending moment is $m = EI (\\kappa - \\kappa_0)$, in which $\\kappa$ is the material measure of curvature",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "EI"
        },
        "physicsAxialStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$EA$ [SI:N] axial stiffness of beam; the axial force is $f_{ax} = EA (\\varepsilon -\\varepsilon_0)$, in which $\\varepsilon = |\\rv^\\prime|-1$ is the axial strain",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "EA"
        },
        "physicsBendingDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_{K}$ [SI:Nm$^2$/s] bending damping of beam ; the additional virtual work due to damping is $\\delta W_{\\dot \\kappa} = \\int_0^L \\dot \\kappa \\delta \\kappa dx$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_{K}"
        },
        "physicsAxialDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_{\\varepsilon}$ [SI:N/s] axial damping of beam; the additional virtual work due to damping is $\\delta W_{\\dot\\varepsilon} = \\int_0^L \\dot \\varepsilon \\delta \\varepsilon dx$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_{\\varepsilon}"
        },
        "physicsReferenceAxialStrain": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\varepsilon_0$ [SI:1] reference axial strain of beam (pre-deformation) of beam; without external loading the beam will statically keep the reference axial strain value",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\varepsilon_0"
        },
        "physicsReferenceCurvature": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\kappa_0$ [SI:1/m] reference curvature of beam (pre-deformation) of beam; without external loading the beam will statically keep the reference curvature value",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\kappa_0"
        },
        "physicsUseCouplingTerms": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "true: correct case, where all coupling terms due to moving mass are respected; false: only include constant mass for ALE node coordinate, but deactivate other coupling terms (behaves like ANCFCable2D then)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "physicsAddALEvariation": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "true: correct case, where additional terms related to variation of strain and curvature are added",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "nodeNumbers": {
            "type": "NodeIndex3",
            "default": "Index3({EXUstd::InvalidIndex, EXUstd::InvalidIndex, EXUstd::InvalidIndex})",
            "defaultStr": "\"Index3({EXUstd::InvalidIndex, EXUstd::InvalidIndex, EXUstd::InvalidIndex})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "two node numbers ANCF cable element, third node=ALE GenericODE2 node",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "useReducedOrderIntegration": {
            "type": "Index",
            "default": 0,
            "defaultStr": "0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "0/false: use Gauss order 9 integration for virtual work of axial forces, order 5 for virtual work of bending moments; 1/true: use Gauss order 7 integration for virtual work of axial forces, order 3 for virtual work of bending moments",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "strainIsRelativeToReference": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$f\\cRef$ if set to 1., a pre-deformed reference configuration is considered as the stressless state; if set to 0., the straight configuration plus the values of $\\varepsilon_0$ and $\\kappa_0$ serve as a reference geometry; allows also values between 0. and 1.",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f\\cRef"
        },
        "drawHeight": {
            "type": "float",
            "default": "0.f",
            "defaultStr": "\"0.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if beam is drawn with rectangular shape, this is the drawing height",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA color of the object; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectANCFBeam": {
        "nodeNumbers": {
            "type": "NodeIndex2",
            "default": "Index2({EXUstd::InvalidIndex, EXUstd::InvalidIndex})",
            "defaultStr": "\"Index2({EXUstd::InvalidIndex, EXUstd::InvalidIndex})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "two node numbers for beam element",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "physicsLength": {
            "type": "PReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$L$ [SI:m] reference length of beam; such that the total volume (e.g. for volume load) gives $\\rho A L$; must be positive",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "L"
        },
        "sectionData": {
            "type": "BeamSection",
            "default": "BeamSection()",
            "defaultStr": "\"BeamSection()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "data as given by exudyn.BeamSection(), defining inertial, stiffness and damping parameters of beam section.",
            "destination": "M",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "crossSectionPenaltyFactor": {
            "type": "Vector3D",
            "default": "Vector3D({1.,1.,1.})",
            "defaultStr": "\"Vector3D({1.,1.,1.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$f_{cs} = [f_{yy},\\,f_{zz},\\,f_{yz}]\\tp$ [SI:1] additional penalty factors for cross section deformation, which are in total $k_{cs} = [f_{yy}\\cdot k_{yy},\\, f_{zz}\\cdot k_{zz},\\, f_{yz}\\cdot k_{yz}]\\tp$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f_{cs} = [f_{yy},\\,f_{zz},\\,f_{yz}]\\tp"
        },
        "sectionGeometry": {
            "type": "BeamSectionGeometry",
            "default": "BeamSectionGeometry()",
            "defaultStr": "\"BeamSectionGeometry()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "defines cross section shape used for visualization and contact",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA color of the object; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectBeamGeometricallyExact2D": {
        "nodeNumbers": {
            "type": "NodeIndex2",
            "default": "Index2({EXUstd::InvalidIndex, EXUstd::InvalidIndex})",
            "defaultStr": "\"Index2({EXUstd::InvalidIndex, EXUstd::InvalidIndex})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "two node numbers for beam element",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "physicsLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$L$ [SI:m] reference length of beam; such that the total volume (e.g. for volume load) gives $\\rho A L$; must be positive",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "L"
        },
        "physicsMassPerLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\rho A$ [SI:kg/m] mass per length of beam",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\rho A"
        },
        "physicsCrossSectionInertia": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\rho J$ [SI:kg m] cross section mass moment of inertia; inertia acting against rotation of cross section",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\rho J"
        },
        "physicsBendingStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$EI$ [SI:Nm$^2$] bending stiffness of beam; the bending moment is $m = EI (\\kappa - \\kappa_0)$, in which $\\kappa$ is the material measure of curvature",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "EI"
        },
        "physicsAxialStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$EA$ [SI:N] axial stiffness of beam; the axial force is $f_{ax} = EA (\\varepsilon -\\varepsilon_0)$, in which $\\varepsilon$ is the axial strain",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "EA"
        },
        "physicsShearStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$GA$ [SI:N] effective shear stiffness of beam, including stiffness correction",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "GA"
        },
        "physicsBendingDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_{K}$ [SI:Nm$^2$/s] viscous damping of bending deformation; the additional virtual work due to damping is $\\delta W_{\\dot \\kappa} = \\int_0^L \\dot \\kappa \\delta \\kappa dx$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_{K}"
        },
        "physicsAxialDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_{\\varepsilon}$ [SI:N/s] viscous damping of axial deformation",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_{\\varepsilon}"
        },
        "physicsShearDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_{\\gamma}$ [SI:N/s] viscous damping of shear deformation",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_{\\gamma}"
        },
        "physicsReferenceCurvature": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\kappa_0$ [SI:1/m] reference curvature of beam (pre-deformation) of beam",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\kappa_0"
        },
        "includeReferenceRotations": {
            "type": "bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "if True, rotations at nodes consider reference rotations, which are used for the computation of bending strains (this means that a pre-curved beam is stress-free); if False, the reference rotation of the cross section is orthogonal to the direction between the reference position of the end nodes. This allows to easily share nodes among several beams with different cross section orientation.",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawHeight": {
            "type": "float",
            "default": "0.f",
            "defaultStr": "\"0.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if beam is drawn with rectangular shape, this is the drawing height",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA color of the object; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectBeamGeometricallyExact": {
        "nodeNumbers": {
            "type": "NodeIndex2",
            "default": "Index2({EXUstd::InvalidIndex, EXUstd::InvalidIndex})",
            "defaultStr": "\"Index2({EXUstd::InvalidIndex, EXUstd::InvalidIndex})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "two node numbers for beam element",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "physicsLength": {
            "type": "PReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$L$ [SI:m] reference length of beam; such that the total volume (e.g. for volume load) gives $\\rho A L$; must be positive",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "L"
        },
        "sectionData": {
            "type": "BeamSection",
            "default": "BeamSection()",
            "defaultStr": "\"BeamSection()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "data as given by exudyn.BeamSection(), defining inertial, stiffness and damping parameters of beam section.",
            "destination": "M",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "sectionGeometry": {
            "type": "BeamSectionGeometry",
            "default": "BeamSectionGeometry()",
            "defaultStr": "\"BeamSectionGeometry()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "defines cross section shape used for visualization and contact",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA color of the object; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectANCFThinPlate": {
        "physicsThickness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$h$ [SI:m] thickness of plate",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "h"
        },
        "physicsDensity": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\rho$ [SI:kg/m$^3$] density of the plate, possibly averaged over thickness",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\rho"
        },
        "physicsStrainCoefficients": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Dm_\\varepsilon$ [SI:N/m] stiffness coefficients related to inplane normal and shear strains, integrated over height of the plate",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Dm_\\varepsilon"
        },
        "physicsCurvatureCoefficients": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Dm_\\kappa$ [SI:Nm] stiffness coefficients related to curvatures, integrated over height of the plate",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Dm_\\kappa"
        },
        "strainIsRelativeToReference": {
            "type": "Real",
            "default": 1.0,
            "defaultStr": "1.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$f\\cRef$ if set to 1., a pre-deformed reference configuration is considered as the stressless state; if set to 0., the straight configuration serves as a reference geometry; allows also values between 0. and 1. to perform a transition during static computation",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f\\cRef"
        },
        "nodeNumbers": {
            "type": "NodeIndex4",
            "default": "Index4({EXUstd::InvalidIndex, EXUstd::InvalidIndex, EXUstd::InvalidIndex, EXUstd::InvalidIndex})",
            "defaultStr": "\"Index4({EXUstd::InvalidIndex, EXUstd::InvalidIndex, EXUstd::InvalidIndex, EXUstd::InvalidIndex})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "4 NodePointSlope12 node numbers",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "useReducedOrderIntegration": {
            "type": "Index",
            "default": 0,
            "defaultStr": "0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "0/false: use highest Gauss integration for virtual work of strains",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA color of the object; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorSpringDamper": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "referenceLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$L_0$reference length [SI:m] of spring",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "L_0"
        },
        "stiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k$stiffness [SI:N/m] of spring; force acts against (length-initialLength)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k"
        },
        "damping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d$damping [SI:N/(m s)] of damper; force acts against d/dt(length)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d"
        },
        "force": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$f_{a}$added constant force [SI:N] of spring; scalar force; f=1 is equivalent to reducing initialLength by 1/stiffness; f > 0: tension; f < 0: compression; can be used to model actuator force",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f_{a}"
        },
        "velocityOffset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\dot L_0$velocity offset [SI:m/s] of damper, being equivalent to time change of reference length",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot L_0"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "springForceUserFunction": {
            "type": "PyFunctionMbsScalarIndexScalar5",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal$A Python function which defines the spring force with parameters; the Python function will only be evaluated, if activeConnector is true, otherwise the SpringDamper is inactive; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal"
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorCartesianSpringDamper": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "stiffness": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\kv$stiffness [SI:N/m] of springs; act against relative displacements in 0, 1, and 2-direction",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\kv"
        },
        "damping": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\dv$damping [SI:N/(m s)] of dampers; act against relative velocities in 0, 1, and 2-direction",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dv"
        },
        "offset": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\vv_{\\mathrm{off}}$offset between two springs",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\vv_{\\mathrm{off}}"
        },
        "springForceUserFunction": {
            "type": "PyFunctionVector3DmbsScalarIndexScalar4Vector3D",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal^3$A Python function which computes the 3D force vector between the two marker points, if activeConnector=True; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal^3"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorRigidBodySpringDamper": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$n_d$node number of a NodeGenericData (size depends on application) for dataCoordinates for user functions (e.g., implementing contact/friction user function)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_d"
        },
        "stiffness": {
            "type": "Matrix6D",
            "default": "Matrix6D(6,6,0.)",
            "defaultStr": "\"Matrix6D(6,6,0.)\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "stiffness [SI:N/m or Nm/rad] of translational, torsional and coupled springs; act against relative displacements in x, y, and z-direction as well as the relative angles (calculated as Euler angles); in the simplest case, the first 3 diagonal values correspond to the local stiffness in x,y,z direction and the last 3 diagonal values correspond to the rotational stiffness around x,y and z axis",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "damping": {
            "type": "Matrix6D",
            "default": "Matrix6D(6,6,0.)",
            "defaultStr": "\"Matrix6D(6,6,0.)\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "damping [SI:N/(m/s) or Nm/(rad/s)] of translational, torsional and coupled dampers; very similar to stiffness, however, the rotational velocity is computed from the angular velocity vector",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "rotationMarker0": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "local rotation matrix for marker 0; stiffness, damping, etc. components are measured in local coordinates relative to rotationMarker0",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "rotationMarker1": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "local rotation matrix for marker 1; stiffness, damping, etc. components are measured in local coordinates relative to rotationMarker1",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "offset": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0.,0.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0.,0.,0.,0.})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "translational and rotational offset considered in the spring force calculation",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "intrinsicFormulation": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if True, the joint uses the intrinsic formulation, which is independent on order of markers, using a mid-point and mid-rotation for evaluation and application of connector forces and torques; this uses a Lie group formulation; in this case, the force/torque vector is computed from the stiffness matrix times the 6-vector of the SE3 matrix logarithm between the two marker positions/rotations, see the equations",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "springForceTorqueUserFunction": {
            "type": "PyFunctionVector6DmbsScalarIndex4Vector3D2Matrix6D2Matrix3DVector6D",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal^6$A Python function which computes the 6D force-torque vector (3D force + 3D torque) between the two rigid body markers, if activeConnector=True; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal^6"
        },
        "postNewtonStepUserFunction": {
            "type": "PyFunctionVectorMbsScalarIndex4VectorVector3D2Matrix6D2Matrix3DVector6D",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF}_{PN} \\in \\Rcal$A Python function which computes the error of the PostNewtonStep; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF}_{PN} \\in \\Rcal"
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorLinearSpringDamper": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,\\, m1]$list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,\\, m1]"
        },
        "stiffness": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k$torsional stiffness [SI:Nm/rad] against relative rotation",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k"
        },
        "damping": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d$torsional damping [SI:Nm/(rad/s)]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d"
        },
        "axisMarker0": {
            "type": "Vector3D",
            "default": "Vector3D({1,0,0})",
            "defaultStr": "\"Vector3D({1,0,0})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{m0}{\\dv}$local axis of spring-damper in marker 0 coordinates; this axis will co-move with marker $m0$; if marker m0 is attached to ground, the spring-damper represents linear equations",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{m0}{\\dv}"
        },
        "offset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$x_\\mathrm{off}$translational offset considered in the spring force calculation (this can be used as position control input!)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "x_\\mathrm{off}"
        },
        "velocityOffset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$v_\\mathrm{off}$velocity offset considered in the damper force calculation (this can be used as velocity control input!)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "v_\\mathrm{off}"
        },
        "force": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$f_c$additional constant force [SI:Nm] added to spring-damper; this can be used to prescribe a force between the two attached bodies (e.g., for actuation and control)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f_c"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "springForceUserFunction": {
            "type": "PyFunctionMbsScalarIndexScalar5",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal$A Python function which computes the scalar force between the two rigid body markers along axisMarker0 in $m0$ coordinates, if activeConnector=True; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal"
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawAsCylinder": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if this flag is True, the spring-damper is represented as cylinder; this may fit better if the spring-damper represents an actuator",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorTorsionalSpringDamper": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$n_d$node number of a NodeGenericData with 1 dataCoordinate for continuous rotation reconstruction; if this node is left to invalid index, it will not be used",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_d"
        },
        "stiffness": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k$torsional stiffness [SI:Nm/rad] against relative rotation",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k"
        },
        "damping": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d$torsional damping [SI:Nm/(rad/s)]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d"
        },
        "rotationMarker0": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "local rotation matrix for marker 0; transforms joint into marker coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "rotationMarker1": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "local rotation matrix for marker 1; transforms joint into marker coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "offset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\theta_\\mathrm{off}$rotational offset considered in the spring torque calculation (this can be used as rotation control input!)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\theta_\\mathrm{off}"
        },
        "velocityOffset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\omega_\\mathrm{off}$angular velocity offset considered in the damper torque calculation (this can be used as angular velocity control input!)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\omega_\\mathrm{off}"
        },
        "torque": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\tau_c$additional constant torque [SI:Nm] added to spring-damper; this can be used to prescribe a torque between the two attached bodies (e.g., for actuation and control)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\tau_c"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "springTorqueUserFunction": {
            "type": "PyFunctionMbsScalarIndexScalar5",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal$A Python function which computes the scalar torque between the two rigid body markers in local joint0 coordinates, if activeConnector=True; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal"
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorCoordinateSpringDamper": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "stiffness": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k$stiffness [SI:N/m] of spring; acts against relative value of coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k"
        },
        "damping": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$d$damping [SI:N/(m s)] of damper; acts against relative velocity of coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d"
        },
        "offset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$l_\\mathrm{off}$offset between two coordinates (reference length of springs), see equation",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "l_\\mathrm{off}"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "springForceUserFunction": {
            "type": "PyFunctionMbsScalarIndexScalar5",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal$A Python function which defines the spring force with 8 parameters, see equations section / see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal"
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorCoordinateSpringDamperExt": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "node number of a NodeGenericData for 3 data coordinates (friction mode, last sticking position, limit stop state), see description for details; must exist in case of bristle friction model or limit stops",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "stiffness": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k$stiffness [SI:N/m] of spring; acts against relative value of coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k"
        },
        "damping": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$d$damping [SI:N/(m s)] of damper; acts against relative velocity of coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d"
        },
        "offset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$x_\\mathrm{off}$offset between two coordinates (reference length of springs), see equation; it can be used to represent the pre-scribed drive coordinate",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "x_\\mathrm{off}"
        },
        "velocityOffset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$v_\\mathrm{off}$offset between two coordinates; used to model D-control of a drive, where damping is not acting against prescribed velocity",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "v_\\mathrm{off}"
        },
        "factor0": {
            "type": "Real",
            "default": 1.0,
            "defaultStr": "1.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$f_0$marker 0 coordinate is multiplied with factor0",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f_0"
        },
        "factor1": {
            "type": "Real",
            "default": 1.0,
            "defaultStr": "1.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$f_1$marker 1 coordinate is multiplied with factor1",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f_1"
        },
        "fDynamicFriction": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$f_{\\mu,\\mathrm{d}}$dynamic (viscous) friction force [SI:N] against relative velocity when sliding; assuming a normal force $f_N$, the friction force can be interpreted as $f_\\mu = \\mu f_N$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f_{\\mu,\\mathrm{d}}"
        },
        "fStaticFrictionOffset": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$f_{\\mu,\\mathrm{so}}$static (dry) friction offset force [SI:N]; assuming a normal force $f_N$, the friction force is limited by $f_\\mu \\le (\\mu_{so} + \\mu_d) f_N = f_{\\mu_d} + f_{\\mu_{so}}$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f_{\\mu,\\mathrm{so}}"
        },
        "stickingStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$k_\\mu$stiffness of bristles in sticking case  [SI:N/m]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k_\\mu"
        },
        "stickingDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$d_\\mu$damping of bristles in sticking case  [SI:N/(m/s)]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_\\mu"
        },
        "exponentialDecayStatic": {
            "type": "PReal",
            "default": 0.001,
            "defaultStr": "0.001",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$v_\\mathrm{exp}$relative velocity for exponential decay of static friction offset force [SI:m/s] against relative velocity; at $\\Delta v = v_\\mathrm{exp}$, the static friction offset force is reduced to 36.8\\%",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "v_\\mathrm{exp}"
        },
        "fViscousFriction": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$f_{\\mu,\\mathrm{v}}$viscous friction force part [SI:N/(m s)], acting against relative velocity in sliding case",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f_{\\mu,\\mathrm{v}}"
        },
        "frictionProportionalZone": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$v_\\mathrm{reg}$if non-zero, a regularized Stribeck model is used, regularizing friction force around zero velocity - leading to zero friction force in case of zero velocity; this does not require a data node at all; if zero, the bristle model is used, which requires a data node which contains previous friction state and last sticking position",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "v_\\mathrm{reg}"
        },
        "limitStopsUpper": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$s_\\mathrm{upper}$upper (maximum) value [SI:m] of coordinate before limit is activated; defined relative to the two marker coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "s_\\mathrm{upper}"
        },
        "limitStopsLower": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$s_\\mathrm{lower}$lower (minimum) value [SI:m] of coordinate before limit is activated; defined relative to the two marker coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "s_\\mathrm{lower}"
        },
        "limitStopsStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$k_\\mathrm{limits}$stiffness [SI:N/m] of limit stop (contact stiffness); following a linear contact model",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k_\\mathrm{limits}"
        },
        "limitStopsDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$d_\\mathrm{limits}$damping [SI:N/(m/s)] of limit stop (contact damping); following a linear contact model",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_\\mathrm{limits}"
        },
        "useLimitStops": {
            "type": "bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if True, limit stops are considered and parameters must be set accordingly; furthermore, the NodeGenericData must have 3 data coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "springForceUserFunction": {
            "type": "PyFunctionMbsScalarIndexScalar11",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal$A Python function which defines the spring force with 8 parameters, see equations section / see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal"
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorGravity": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "gravitationalConstant": {
            "type": "Real",
            "default": 6.6743e-11,
            "defaultStr": "6.6743e-11",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$G$gravitational constant [SI:m$^3$kg$^{-1}$s$^{-2}$)]; while not recommended, a negative constant gan represent a repulsive force",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "G"
        },
        "mass0": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$mass_0$mass [SI:kg] of object attached to marker $m0$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "mass_0"
        },
        "mass1": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$mass_1$mass [SI:kg] of object attached to marker $m1$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "mass_1"
        },
        "minDistanceRegularization": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$d_{min}$distance [SI:m] at which a regularization is added in order to avoid singularities, if objects come close",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_{min}"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorHydraulicActuatorSimple": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "nodeNumbers": {
            "type": "ArrayNodeIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mathbf{n}_n = [n_{ODE1}]\\tp$currently a list with one node number of NodeGenericODE1 for 2 hydraulic pressures (reference values for this node must be zero); data node may be added in future for switching",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "\\mathbf{n}_n = [n_{ODE1}]\\tp"
        },
        "offsetLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$L_o$offset length [SI:m] of cylinder, representing minimal distance between the two bushings at stroke=0",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "L_o"
        },
        "strokeLength": {
            "type": "PReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$L_s$stroke length [SI:m] of cylinder, representing maximum extension relative to $L_o$; the measured distance between the markers is $L_s+L_o$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "L_s"
        },
        "chamberCrossSection0": {
            "type": "PReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$A_0$cross section [SI:m$^2$] of chamber (inner cylinder) at piston head (nut) side (0)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "A_0"
        },
        "chamberCrossSection1": {
            "type": "PReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$A_1$cross section [SI:m$^2$] of chamber at piston rod side (1); usually smaller than chamberCrossSection0",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "A_1"
        },
        "hoseVolume0": {
            "type": "PReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$V_{h,0}$hose volume [SI:m$^3$] at piston head (nut) side (0); as the effective bulk modulus would go to infinity at stroke length zero, the hose volume must be greater than zero",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "V_{h,0}"
        },
        "hoseVolume1": {
            "type": "PReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$V_{h,1}$hose volume [SI:m$^3$] at piston rod side (1); as the effective bulk modulus would go to infinity at max. stroke length, the hose volume must be greater than zero",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "V_{h,1}"
        },
        "valveOpening0": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$A_{v,0}$relative opening of valve $[-1 \\ldots 1]$ [SI:1] at piston head (nut) side (0); positive value is valve opening towards system pressure, negative value is valve opening towards tank pressure; zero means closed valve",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "A_{v,0}"
        },
        "valveOpening1": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$A_{v,1}$relative opening of valve $[-1 \\ldots 1]$ [SI:1] at piston rod side (1); positive value is valve opening towards system pressure, negative value is valve opening towards tank pressure; zero means closed valve",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "A_{v,1}"
        },
        "actuatorDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$d_{HA}$damping [SI:N/(m$\\,$s)] of hydraulic actuator (against actuator axial velocity)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_{HA}"
        },
        "oilBulkModulus": {
            "type": "PReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$K_{oil}$bulk modulus of oil [SI:N/(m$^2$)]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "K_{oil}"
        },
        "cylinderBulkModulus": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$K_{cyl}$bulk modulus of cylinder [SI:N/(m$^2$)]; in fact, this is value represents the effect of the cylinder stiffness on the effective bulk modulus",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "K_{cyl}"
        },
        "hoseBulkModulus": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$K_{hose}$bulk modulus of hose [SI:N/(m$^2$)]; in fact, this is value represents the effect of the hose stiffness on the effective bulk modulus",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "K_{hose}"
        },
        "nominalFlow": {
            "type": "PReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$Q_n$nominal flow of oil through valve [SI:m$^3$/s]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "Q_n"
        },
        "systemPressure": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$p_s$system pressure [SI:N/(m$^2$)]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "p_s"
        },
        "tankPressure": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$p_t$tank pressure [SI:N/(m$^2$)]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "p_t"
        },
        "useChamberVolumeChange": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if True, the pressure build up equations include the change of oil stiffness due to change of chamber volume",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "cylinderRadius": {
            "type": "float",
            "default": "0.05f",
            "defaultStr": "\"0.05f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius for drawing of cylinder",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "rodRadius": {
            "type": "float",
            "default": "0.03f",
            "defaultStr": "\"0.03f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius for drawing of rod",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "pistonRadius": {
            "type": "float",
            "default": "0.04f",
            "defaultStr": "\"0.04f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius for drawing of piston (if drawn transparent)",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "pistonLength": {
            "type": "float",
            "default": "0.001f",
            "defaultStr": "\"0.001f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius for drawing of piston (if drawn transparent)",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "rodMountRadius": {
            "type": "float",
            "default": "0.0f",
            "defaultStr": "\"0.0f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius for drawing of rod mount sphere",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "baseMountRadius": {
            "type": "float",
            "default": "0.0f",
            "defaultStr": "\"0.0f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius for drawing of base mount sphere",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "baseMountLength": {
            "type": "float",
            "default": "0.0f",
            "defaultStr": "\"0.0f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius for drawing of base mount sphere",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "colorCylinder": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA cylinder color; if R==-1, use default connector color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "colorPiston": {
            "type": "Float4",
            "default": "Float4({0.8f,0.8f,0.8f,1.f})",
            "defaultStr": "\"Float4({0.8f,0.8f,0.8f,1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA piston color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorReevingSystemSprings": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m_0, \\, m_1, \\, \\ldots, \\, m_{nr-1},\\, m_{c0}, \\, m_{c1}]\\tp$list of position or rigid body markers used in reeving system and optional two coordinate markers ($m_{c0}, \\, m_{c1}$); the first marker $m_0$ and the last rigid body marker $m_{nr-1}$ represent the ends of the rope and are directly connected to a position; the markers $m_1, \\, \\ldots, \\, m_{nr-2}$ can be connected to sheaves, for which a radius and an axis can be prescribed. The coordinate markers are optional and represent prescribed length at the rope ends (marker $m_{c0}$ is added length at start, marker $m_{c1}$ is added length at end of the rope in the reeving system)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m_0, \\, m_1, \\, \\ldots, \\, m_{nr-1},\\, m_{c0}, \\, m_{c1}]\\tp"
        },
        "hasCoordinateMarkers": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, the list of markers (markerNumbers) contains two coordinate markers at the end of the list, representing the prescribed change of length at both ends",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "coordinateFactors": {
            "type": "Vector2D",
            "default": "Vector2D({1,1})",
            "defaultStr": "\"Vector2D({1,1})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[f_0,\\, f_1]\\tp$factors which are multiplied with the values of coordinate markers; this can be used, e.g., to change directions or to transform rotations (revolutions of a sheave) into change of length",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[f_0,\\, f_1]\\tp"
        },
        "stiffnessPerLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$EA$stiffness per length [SI:N/m/m] of rope; in case of cross section $A$ and Young's modulus $E$, this parameter results in $E\\cdot A$; the effective stiffness of the reeving system is computed as $EA/L$ in which $L$ is the current length of the rope",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "EA"
        },
        "dampingPerLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$DA$axial damping per length [SI:N/(m/s)/m] of rope; the effective damping coefficient of the reeving system is computed as $DA/L$ in which $L$ is the current length of the rope",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "DA"
        },
        "dampingTorsional": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$DT$torsional damping [SI:Nms] between sheaves; this effect can damp rotations around the rope axis, pairwise between sheaves; this parameter is experimental",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "DT"
        },
        "dampingShear": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$DS$damping of shear motion [SI:Ns] between sheaves; this effect can damp motion perpendicular to the rope between each pair of sheaves; this parameter is experimental",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "DS"
        },
        "regularizationForce": {
            "type": "Real",
            "default": 0.1,
            "defaultStr": "0.1",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$F_{reg}$small regularization force [SI:N] in order to avoid large compressive forces; this regularization force can either be $<0$ (using a linear tension/compression spring model) or $>0$, which restricts forces in the rope to be always $\\ge -F_{reg}$. Note that smaller forces lead to problems in implicit integrators and smaller time steps. For explicit integrators, this force can be chosen close to zero.",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "F_{reg}"
        },
        "referenceLength": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$L_{ref}$reference length for computation of roped force",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "L_{ref}"
        },
        "sheavesAxes": {
            "type": "Vector3DList",
            "default": "Vector3DList()",
            "defaultStr": "\"Vector3DList()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\lv_a = [\\LU{m0}{\\av_0},\\, \\LU{m1}{\\av_1},\\, \\ldots ] in [\\Rcal^{3}, ...]$list of local vectors axes of sheaves; vectors refer to rigid body markers given in list of markerNumbers; first and last axes are ignored, as they represent the attachment of the rope ends",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\lv_a = [\\LU{m0}{\\av_0},\\, \\LU{m1}{\\av_1},\\, \\ldots ] in [\\Rcal^{3}, ...]"
        },
        "sheavesRadii": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\lv_r = [r_0,\\, r_1,\\, \\ldots]\\tp \\in \\Rcal^{n}$radius for each sheave, related to list of markerNumbers and list of sheaveAxes; first and last radii must always be zero.",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\lv_r = [r_0,\\, r_1,\\, \\ldots]\\tp \\in \\Rcal^{n}"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "ropeRadius": {
            "type": "float",
            "default": "0.001f",
            "defaultStr": "\"0.001f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius of rope",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorDistance": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "distance": {
            "type": "PReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_0$prescribed distance [SI:m] of the used markers; must by greater than zero",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_0"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = link size; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorCoordinate": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "offset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$l_\\mathrm{off}$An offset between the two values",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "l_\\mathrm{off}"
        },
        "factorValue1": {
            "type": "Real",
            "default": 1.0,
            "defaultStr": "1.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k_{m1}$An additional factor multiplied with value1 used in algebraic equation",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k_{m1}"
        },
        "velocityLevel": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "If true: connector constrains velocities (only works for \\hac{ODE2} coordinates!); offset is used between velocities; in this case, the offsetUserFunction\\_t is considered and offsetUserFunction is ignored",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "offsetUserFunction": {
            "type": "PyFunctionMbsScalarIndexScalar",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal$A Python function which defines the time-dependent offset; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal"
        },
        "offsetUserFunction_t": {
            "type": "PyFunctionMbsScalarIndexScalar",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF}_t \\in \\Rcal$time derivative of offsetUserFunction; needed for velocity level constraints; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF}_t \\in \\Rcal"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = link size; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorCoordinateVector": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "scalingMarker0": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Xm_{m0} \\in \\Rcal^{n_{ae} \\times n_{q_{m0}}}$linear scaling matrix for coordinate vector of marker 0; matrix provided in Python numpy format",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Xm_{m0} \\in \\Rcal^{n_{ae} \\times n_{q_{m0}}}"
        },
        "scalingMarker1": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Xm_{m1} \\in \\Rcal^{n_{ae} \\times n_{q_{m1}}}$linear scaling matrix for coordinate vector of marker 1; matrix provided in Python numpy format",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Xm_{m1} \\in \\Rcal^{n_{ae} \\times n_{q_{m1}}}"
        },
        "quadraticTermMarker0": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Ym_{m0} \\in \\Rcal^{n_{ae} \\times n_{q_{m0}}}$quadratic scaling matrix for coordinate vector of marker 0; matrix provided in Python numpy format",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Ym_{m0} \\in \\Rcal^{n_{ae} \\times n_{q_{m0}}}"
        },
        "quadraticTermMarker1": {
            "type": "NumpyMatrix",
            "default": "Matrix()",
            "defaultStr": "\"Matrix()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Ym_{m0} \\in \\Rcal^{n_{ae} \\times n_{q_{m0}}}$quadratic scaling matrix for coordinate vector of marker 1; matrix provided in Python numpy format",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Ym_{m0} \\in \\Rcal^{n_{ae} \\times n_{q_{m0}}}"
        },
        "offset": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\vv_\\mathrm{off} \\in \\Rcal^{n_{ae}}$offset added to constraint equation; only active, if no userFunction is defined",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\vv_\\mathrm{off} \\in \\Rcal^{n_{ae}}"
        },
        "velocityLevel": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "If true: connector constrains velocities (only works for \\hac{ODE2} coordinates!); offset is used between velocities; in this case, the offsetUserFunction\\_t is considered and offsetUserFunction is ignored",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "constraintUserFunction": {
            "type": "PyFunctionVectorMbsScalarIndex2VectorBool",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\cv_{user} \\in \\Rcal^{n_{ae}}$A Python user function which computes the constraint equations; to define the number of algebraic equations, set scalingMarker0 as a numpy.zeros((nAE,1)) array with nAE being the number algebraic equations; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\cv_{user} \\in \\Rcal^{n_{ae}}"
        },
        "jacobianUserFunction": {
            "type": "PyFunctionMatrixContainerMbsScalarIndex2VectorBool",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\Jm_{user} \\in \\Rcal^{(n_{q_{m0}}+n_{q_{m1}}) \\times n_{ae}}$A Python user function which computes the jacobian, i.e., the derivative of the left-hand-side object equation w.r.t.\\ the coordinates (times $f_{ODE2}$) and w.r.t.\\ the velocities (times $f_{ODE2_t}$). Terms on the RHS must be subtracted from the LHS equation; the respective terms for the stiffness matrix and damping matrix are automatically added; see description below",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Jm_{user} \\in \\Rcal^{(n_{q_{m0}}+n_{q_{m1}}) \\times n_{ae}}"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectConnectorRollingDiscPenalty": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector; $m0$ represents a point at the plane surface (normal of surface plane defined by planeNormal); the ground can also be a moving rigid body; $m1$ represents the rolling body, which has its reference point (=local position [0,0,0]) at the disc center point",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_d$node number of a NodeGenericData (size=3) for 3 dataCoordinates, needed for discontinuous iteration (friction and contact)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_d"
        },
        "discRadius": {
            "type": "PReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "defines the disc radius",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "discAxis": {
            "type": "Vector3D",
            "default": "Vector3D({1,0,0})",
            "defaultStr": "\"Vector3D({1,0,0})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{m1}{\\wv_{1}}, \\;\\; |\\LU{m1}{\\wv_{1}}| = 1$axis of disc defined in marker $m1$ frame",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{m1}{\\wv_{1}}, \\;\\; |\\LU{m1}{\\wv_{1}}| = 1"
        },
        "planeNormal": {
            "type": "Vector3D",
            "default": "Vector3D({0,0,1})",
            "defaultStr": "\"Vector3D({0,0,1})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{m0}{\\vv_{PN}}, \\;\\; |\\LU{m0}{\\vv_{PN}}| = 1$normal to the contact / rolling plane (ground); note that the plane reference point can be arbitrarily chosen by the location of the marker $m0$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{m0}{\\vv_{PN}}, \\;\\; |\\LU{m0}{\\vv_{PN}}| = 1"
        },
        "dryFrictionAngle": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\alpha_t$angle [SI:1 (rad)] which defines a rotation of the local tangential coordinates dry friction; this allows to model Mecanum wheels with specified roll angle",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\alpha_t"
        },
        "contactStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k_c$normal contact stiffness [SI:N/m]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k_c"
        },
        "contactDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$d_c$normal contact damping [SI:N/(m s)]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_c"
        },
        "dryFriction": {
            "type": "Vector2D",
            "default": "Vector2D({0,0})",
            "defaultStr": "\"Vector2D({0,0})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$[\\mu_x,\\mu_y]\\tp$dry friction coefficients [SI:1] in local marker 1 joint $J1$ coordinates; if $\\alpha_t==0$, lateral direction $l=x$ and forward direction $f=y$; assuming a normal force $f_n$, the local friction force can be computed as $\\LU{J1}{\\vp{f_{t,x}}{f_{t,y}}} = \\vp{\\mu_x f_n}{\\mu_y f_n}$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[\\mu_x,\\mu_y]\\tp"
        },
        "dryFrictionProportionalZone": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$v_\\mu$limit velocity [m/s] up to which the friction is proportional to velocity (for regularization / avoid numerical oscillations)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "v_\\mu"
        },
        "viscousFriction": {
            "type": "Vector2D",
            "default": "Vector2D({0,0})",
            "defaultStr": "\"Vector2D({0,0})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$[d_x, d_y]\\tp$viscous friction coefficients [SI:1/(m/s)] in local marker 1 joint $J1$ coordinates; proportional to slipping velocity, leading to increasing slipping friction force for increasing slipping velocity",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[d_x, d_y]\\tp"
        },
        "rollingFrictionViscous": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mu_r$rolling friction [SI:1], which acts against the velocity of the trail on ground and leads to a force proportional to the contact normal force; currently, only implemented for disc axis parallel to ground!",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu_r"
        },
        "useLinearProportionalZone": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if True, a linear proportional zone is used; the linear zone performs better in implicit time integration as the Jacobian has a constant tangent in the sticking case",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "discWidth": {
            "type": "float",
            "default": "0.1f",
            "defaultStr": "\"0.1f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "width of disc for drawing",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectContactConvexRoll": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector; $m0$ represents the ground, which can undergo translations but not rotations, and $m1$ represents the rolling body, which has its reference point (=local position [0,0,0]) at the roll's center point",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_d$node number of a NodeGenericData (size=3) for 3 dataCoordinates, needed for discontinuous iteration (friction and contact)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_d"
        },
        "contactStiffness": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k_c$normal contact stiffness [SI:N/m]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k_c"
        },
        "contactDamping": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$d_c$normal contact damping [SI:N/(m s)]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_c"
        },
        "dynamicFriction": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mu_d$dynamic friction coefficient for friction model, see StribeckFunction in exudyn.physics, \\refSection{sec:module:physics}",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu_d"
        },
        "staticFrictionOffset": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mu_{s_off}$static friction offset for friction model (static friction = dynamic friction + static offset), see StribeckFunction in exudyn.physics, \\refSection{sec:module:physics}",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu_{s_off}"
        },
        "viscousFriction": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mu_v$viscous friction coefficient (velocity dependent part) for friction model, see StribeckFunction in exudyn.physics, \\refSection{sec:module:physics}",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu_v"
        },
        "exponentialDecayStatic": {
            "type": "PReal",
            "default": 0.001,
            "defaultStr": "0.001",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$v_{exp}$exponential decay of static friction offset (must not be zero!), see StribeckFunction in exudyn.physics (named expVel there!), \\refSection{sec:module:physics}",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "v_{exp}"
        },
        "frictionProportionalZone": {
            "type": "UReal",
            "default": 0.001,
            "defaultStr": "0.001",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$v_{reg}$limit velocity [m/s] up to which the friction is proportional to velocity (for regularization / avoid numerical oscillations), see StribeckFunction in exudyn.physics (named regVel there!), \\refSection{sec:module:physics}",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "v_{reg}"
        },
        "rollLength": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$L$roll length [m], symmetric w.r.t.\\ centerpoint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "L"
        },
        "coefficientsHull": {
            "type": "NumpyVector",
            "default": " Vector()",
            "defaultStr": "\" Vector()\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\kv \\in \\Rcal^{n_p}$a vector of polynomial coefficients, which provides the polynomial of the CONVEX hull of the roll; $\\mathrm{hull}(x) = k_0 x^{n_p-1} + k x^{n_p-2} + \\ldots + k_{n_p-2} x  + k_{n_p-1}$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\kv \\in \\Rcal^{n_p}"
        },
        "coefficientsHullDerivative": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "$\\kv^\\prime \\in \\Rcal^{n_p}$polynomial coefficients of the polynomial $\\mathrm{hull}^\\prime(x)$",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\kv^\\prime \\in \\Rcal^{n_p}"
        },
        "coefficientsHullDDerivative": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "second derivative of the hull polynomial.",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "rBoundingSphere": {
            "type": "UReal",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "The  radius of the bounding sphere for the contact pre-check, calculated from the polynomial coefficients of the hull",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "pContact": {
            "type": "Vector3D",
            "default": "Vector3D({0,0,0})",
            "defaultStr": "\"Vector3D({0,0,0})\"",
            "required": true,
            "optional": false,
            "readOnly": true,
            "description": "The  current potential contact point. Contact occures if pContact[2] < 0. ",
            "destination": "C",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectContactCoordinate": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "markers define contact gap",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "node number of a NodeGenericData for 1 dataCoordinate (used for active set strategy ==> holds the gap of the last discontinuous iteration)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "contactStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "contact (penalty) stiffness [SI:N/m]; acts only upon penetration",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "contactDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "contact damping [SI:N/(m s)]; acts only upon penetration",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "offset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "offset [SI:m] of contact",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectContactCircleCable2D": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "markers define contact gap",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "node number of a NodeGenericData for nSegments dataCoordinates (used for active set strategy ==> hold the gap of the last discontinuous iteration and the friction state)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "numberOfContactSegments": {
            "type": "Index",
            "default": 3,
            "defaultStr": "3",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "number of linear contact segments to determine contact; each segment is a line and is associated to a data (history) variable; must be same as in according marker",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "contactStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "contact (penalty) stiffness [SI:N/m/(contact segment)]; the stiffness is per contact segment; specific contact forces (per length) $f_N$ act in contact normal direction only upon penetration",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f_N"
        },
        "contactDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "contact damping [SI:N/(m s)/(contact segment)]; the damping is per contact segment; acts in contact normal direction only upon penetration",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "circleRadius": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "radius [SI:m] of contact circle",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "offset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "offset [SI:m] of contact, e.g. to include thickness of cable element",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "showContactCircle": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if True and show=True, the underlying contact circle is shown; uses circleTiling*4 for tiling (from VisualizationSettings.general)",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectContactFrictionCircleCable2D": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$a marker $m0$ with position and orientation and a marker $m1$ of type BodyCable2DShape; together defining the contact geometry",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_g$node number of a NodeGenericData with 3 $\\times n_{cs}$  dataCoordinates (used for active set strategy $\\ra$ hold the gap of the last discontinuous iteration, friction state (+-1=slip, 0=stick, -2=undefined) and the last sticking position; initialize coordinates with list [0.1]*$n_{cs}$+[-2]*$n_{cs}$+[0.]*$n_{cs}$, meaning that there is no initial contact with undefined slip/stick",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_g"
        },
        "numberOfContactSegments": {
            "type": "PInt",
            "default": 3,
            "defaultStr": "3",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_{cs}$number of linear contact segments to determine contact; each segment is a line and is associated to a data (history) variable; must be same as in according marker",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "n_{cs}"
        },
        "contactStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k_c$contact (penalty) stiffness [SI:N/m/(contact segment)]; the stiffness is per contact segment; specific contact forces (per length) $f_n$ act in contact normal direction only upon penetration",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k_c"
        },
        "contactDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_c$contact damping [SI:N/(m s)/(contact segment)]; the damping is per contact segment; acts in contact normal direction only upon penetration",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_c"
        },
        "frictionVelocityPenalty": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mu_v$tangential velocity dependent penalty coefficient for friction [SI:N/(m s)/(contact segment)]; the coefficient causes tangential (contact) forces against relative tangential velocities in the contact area",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu_v"
        },
        "frictionStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mu_k$tangential displacement dependent penalty/stiffness coefficient for friction [SI:N/m/(contact segment)]; the coefficient causes tangential (contact) forces against relative tangential displacements in the contact area",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu_k"
        },
        "frictionCoefficient": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mu$friction coefficient [SI: 1]; tangential specific friction forces (per length) $f_t$ must fulfill the condition $f_t \\le \\mu f_n$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu"
        },
        "circleRadius": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$r$radius [SI:m] of contact circle",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "r"
        },
        "useSegmentNormals": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": " True: use normal and tangent according to linear segment; this is appropriate for very long (compared to circle) segments; False: use normals at segment points according to vector to circle center; this is more consistent for short segments, as forces are only applied in beam tangent and normal direction",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "showContactCircle": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if True and show=True, the underlying contact circle is shown; uses circleTiling*4 for tiling (from VisualizationSettings.general)",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectContactSphereSphere": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers representing centers of spheres, used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_d$node number of a NodeGenericData with numberOfDataCoordinates = 4 dataCoordinates, needed for discontinuous iteration (friction and contact); data variables contain values from last PostNewton iteration: data[0] is the  gap, data[1] is the norm of the tangential velocity (and thus contains information if it is stick or slip); data[2] is the impact velocity; data[3] is the plastic overlap of the Edinburgh Adhesive Elasto-Plastic Model, initialized usually with 0 and set back to 0 in case that spheres have been separated.",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_d"
        },
        "spheresRadii": {
            "type": "Vector2D",
            "default": "Vector2D({-1.,-1.})",
            "defaultStr": "\"Vector2D({-1.,-1.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[r_0,r_1]\\tp$Vector containing radius of sphere 0 and radius of sphere 1 [SI:m]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[r_0,r_1]\\tp"
        },
        "dynamicFriction": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mu_d$dynamic friction coefficient for friction model, see StribeckFunction in exudyn.physics, \\refSection{sec:module:physics}",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu_d"
        },
        "frictionProportionalZone": {
            "type": "UReal",
            "default": 0.001,
            "defaultStr": "0.001",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$v_{reg}$limit velocity [m/s] up to which the friction is proportional to velocity (for regularization / avoid numerical oscillations), see StribeckFunction in exudyn.physics (named regVel there!), \\refSection{sec:module:physics}",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "v_{reg}"
        },
        "contactStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k_c$normal contact stiffness [SI:N/m] (units in case that $n_\\mathrm{exp}=1$)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k_c"
        },
        "contactDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$d_c$linear normal contact damping [SI:N/(m s)]; this damping should be used (!=0) if the restitution coefficient is < 1, as it changes its behavior.",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_c"
        },
        "contactStiffnessExponent": {
            "type": "PReal",
            "default": 1.0,
            "defaultStr": "1.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$n_\\mathrm{exp}$exponent in normal contact model [SI:1]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "n_\\mathrm{exp}"
        },
        "constantPullOffForce": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$f_\\mathrm{adh}$constant adhesion force [SI:N]; Edinburgh Adhesive Elasto-Plastic Model",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f_\\mathrm{adh}"
        },
        "contactPlasticityRatio": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\lambda_\\mathrm{P}$ratio of contact stiffness for first loading and unloading/reloading [SI:1]; Edinburgh Adhesive Elasto-Plastic Model; $\\lambda_\\mathrm{P}=1-k_c/K2$, which gives the contact stiffness for unloading/reloading $K2 = k_c/(1-\\lambda_\\mathrm{P})$; set to 0 in order to fully deactivate Edinburgh Adhesive Elasto-Plastic Model model",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\lambda_\\mathrm{P}"
        },
        "adhesionCoefficient": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$k_\\mathrm{adh}$coefficient for adhesion [SI:N/m] (units in case that $n_\\mathrm{adh}=1$); Edinburgh Adhesive Elasto-Plastic Model; set to 0 to deactivate adhesion model",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k_\\mathrm{adh}"
        },
        "adhesionExponent": {
            "type": "UReal",
            "default": 1.0,
            "defaultStr": "1.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$n_\\mathrm{adh}$exponent for adhesion coefficient [SI:1]; Edinburgh Adhesive Elasto-Plastic Model",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "n_\\mathrm{adh}"
        },
        "restitutionCoefficient": {
            "type": "PReal",
            "default": 1.0,
            "defaultStr": "1.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$e_\\mathrm{res}$coefficient of restitution [SI:1]; used in particular for impact mechanics; different models available within parameter impactModel; the coefficient must be > 0, but can become arbitrarily small to emulate plastic impact (however very small values may lead to numerical problems)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "e_\\mathrm{res}"
        },
        "minimumImpactVelocity": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\dot\\delta_\\mathrm{-,min}$minimal impact velocity for coefficient of restitution [SI:1]; this value adds a lower bound for impact velocities for calculation of viscous impact force; it can be used to apply a larger damping behavior for low impact velocities (or permanent contact)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\dot\\delta_\\mathrm{-,min}"
        },
        "impactModel": {
            "type": "UInt",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$m_\\mathrm{impact}$ number of impact model: 0) linear model (only linear damping is used); 1) Hunt-Crossley model; 2) Gonthier/EtAl-Carvalho/Martins mixed model; model 2 is much more accurate regarding the coefficient of restitution, in the full range [0,1] except for 0; NOTE: in all models, the linear contactDamping still added, if not set to zero!",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "m_\\mathrm{impact}"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({0.7f,0.7f,0.7f,1.f})",
            "defaultStr": "\"Float4({0.7f,0.7f,0.7f,1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectContactCurveCircles": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m_{c0},m_{c1},\\ldots]\\tp$list of $n_c+1$ markers; marker $m0$ represents the marker carrying the curve; all other markers represent centers of $n_c$ circles, used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m_{c0},m_{c1},\\ldots]\\tp"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_d$node number of a NodeGenericData with nDataVariablesPerSegment dataCoordinates per segment, needed for discontinuous iteration; data variables contain values from last PostNewton iteration: data[0+3*i] is the circle number, data[1+3*i] is the gap, data[2+3*i] is the tangential velocity (and thus contains information if it is stick or slip)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_d"
        },
        "circlesRadii": {
            "type": "NumpyVector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[r_{c0},r_{c1}, \\ldots]\\tp \\in \\Rcal^{n_c}$Vector containing radii of $n_c$ circles [SI:m]; number according to size of markerNumbers-1",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[r_{c0},r_{c1}, \\ldots]\\tp \\in \\Rcal^{n_c}"
        },
        "segmentsData": {
            "type": "PyMatrixContainer",
            "default": "PyMatrixContainer()",
            "defaultStr": "\"PyMatrixContainer()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Dm \\in \\Rcal^{n_s \\times 4}$matrix containing a set of two planar point coordinates in each row, representing segments attached to marker $m0$ and undergoing contact with the circles; for segment $s0$ row 0 reads $[p_{0x,s0},\\,p_{0y,s0},\\,p_{1x,s0},\\,p_{1y,s0}]$; note that the segments must be ordered such that going from $\\pv_0$ to $\\pv_1$, the exterior lies on the right (positive) side. MatrixContainer has to be provided in dense mode!",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Dm \\in \\Rcal^{n_s \\times 4}"
        },
        "polynomialData": {
            "type": "PyMatrixContainer",
            "default": "PyMatrixContainer()",
            "defaultStr": "\"PyMatrixContainer()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\Pm \\in \\Rcal^{n_s \\times n_p}$matrix containing coefficients for polynomial enhancements of the linear segments; each row contains polynomial coefficients for the according segment; the polynomial coefficients may contain quadratic, cubic, etc. coefficients, while constant and linear coefficients are automatically selected such that the end points of the polynomial match the segment's endpoints; the local coordinate $x$ of the polynomial runs from 0 to 1 and positive values represent concave geometries (enlarging the curve). MatrixContainer has to be provided in dense mode!",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\Pm \\in \\Rcal^{n_s \\times n_p}"
        },
        "rotationMarker0": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "local rotation matrix for marker 0; used to rotate marker coordinates such that the curve lies in the $x-y$-plane",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "x-y"
        },
        "dynamicFriction": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mu_d$dynamic friction coefficient for friction model, see StribeckFunction in exudyn.physics, \\refSection{sec:module:physics}",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu_d"
        },
        "frictionProportionalZone": {
            "type": "UReal",
            "default": 0.001,
            "defaultStr": "0.001",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$v_{reg}$limit velocity [m/s] up to which the friction is proportional to velocity (for regularization / avoid numerical oscillations), see StribeckFunction in exudyn.physics (named regVel there!), \\refSection{sec:module:physics}",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "v_{reg}"
        },
        "contactStiffness": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k_c$normal contact stiffness [SI:N/m] (units in case that $n_\\mathrm{exp}=1$)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k_c"
        },
        "contactDamping": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$d_c$linear normal contact damping [SI:N/(m s)]; this damping should be used (!=0) if the restitution coefficient is < 1, as it changes its behavior.",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_c"
        },
        "contactModel": {
            "type": "UInt",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$m_\\mathrm{contact}$number of contact model: 0) linear model for stiffness and damping, only proportional to penetration; 1) model taking contact geometry, in particular curvature of circle and curve into account, giving nonlinear normal force model",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "m_\\mathrm{contact}"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectJointGeneric": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "constrainedAxes": {
            "type": "ArrayIndex",
            "default": "ArrayIndex({1,1,1,1,1,1})",
            "defaultStr": "\"ArrayIndex({1,1,1,1,1,1})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\jv=[j_0,\\,\\ldots,\\,j_5]$flag, which determines which translation (0,1,2) and rotation (3,4,5) axes are constrained; for $j_i$, two values are possible: 0=free axis, 1=constrained axis",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\jv=[j_0,\\,\\ldots,\\,j_5]"
        },
        "rotationMarker0": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{m0,J0}{\\Rot}$local rotation matrix for marker $m0$; translation and rotation axes for marker $m0$ are defined in the local body coordinate system and additionally transformed by rotationMarker0",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{m0,J0}{\\Rot}"
        },
        "rotationMarker1": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{m1,J1}{\\Rot}$local rotation matrix for marker $m1$; translation and rotation axes for marker $m1$ are defined in the local body coordinate system and additionally transformed by rotationMarker1",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{m1,J1}{\\Rot}"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "offsetUserFunctionParameters": {
            "type": "Vector6D",
            "default": "Vector6D({0.,0.,0.,0.,0.,0.})",
            "defaultStr": "\"Vector6D({0.,0.,0.,0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\pv_{par}$vector of 6 parameters for joint's offsetUserFunction",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\pv_{par}"
        },
        "offsetUserFunction": {
            "type": "PyFunctionVector6DmbsScalarIndexVector6D",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal^6$A Python function which defines the time-dependent (fixed) offset of translation (indices 0,1,2) and rotation (indices 3,4,5) joint coordinates with parameters (mbs, t, offsetUserFunctionParameters)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal^6"
        },
        "offsetUserFunction_t": {
            "type": "PyFunctionVector6DmbsScalarIndexVector6D",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal^6$(NOT IMPLEMENTED YET)time derivative of offsetUserFunction using the same parameters",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal^6"
        },
        "alternativeConstraints": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "this is an experimental flag, may change in future: if uses alternative contraint equations for rotations, currently in case of 3 locked rotations: $\\LU{0}{\\tv}_{x0}\\tp (\\LU{0}{\\tv}_{y1} \\times \\LU{0}{\\tv}_{z0})$, $\\LU{0}{\\tv}_{y0}\\tp (\\LU{0}{\\tv}_{z1} \\times \\LU{0}{\\tv}_{x0})$, $\\LU{0}{\\tv}_{z0}\\tp (\\LU{0}{\\tv}_{x1} \\times \\LU{0}{\\tv}_{y0})$; this avoids 180\\textdegree flips of the standard configuration in static computations, but leads to different values in Lagrange multipliers",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{0}{\\tv}_{x0}\\tp (\\LU{0}{\\tv}_{y1} \\times \\LU{0}{\\tv}_{z0})"
        },
        "axesRadius": {
            "type": "float",
            "default": "0.1f",
            "defaultStr": "\"0.1f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius of joint axes to draw",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "axesLength": {
            "type": "float",
            "default": "0.4f",
            "defaultStr": "\"0.4f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "length of joint axes to draw",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectJointRevoluteZ": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "rotationMarker0": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{m0,J0}{\\Rot}$local rotation matrix for marker $m0$; translation and rotation axes for marker $m0$ are defined in the local body coordinate system and additionally transformed by rotationMarker0",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{m0,J0}{\\Rot}"
        },
        "rotationMarker1": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{m1,J1}{\\Rot}$local rotation matrix for marker $m1$; translation and rotation axes for marker $m1$ are defined in the local body coordinate system and additionally transformed by rotationMarker1",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{m1,J1}{\\Rot}"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "axisRadius": {
            "type": "float",
            "default": "0.1f",
            "defaultStr": "\"0.1f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius of joint axis to draw",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "axisLength": {
            "type": "float",
            "default": "0.4f",
            "defaultStr": "\"0.4f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "length of joint axis to draw",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectJointPrismaticX": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "rotationMarker0": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{m0,J0}{\\Rot}$local rotation matrix for marker $m0$; translation and rotation axes for marker $m0$ are defined in the local body coordinate system and additionally transformed by rotationMarker0",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{m0,J0}{\\Rot}"
        },
        "rotationMarker1": {
            "type": "Matrix3D",
            "default": "EXUmath::unitMatrix3D",
            "defaultStr": "\"EXUmath::unitMatrix3D\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{m1,J1}{\\Rot}$local rotation matrix for marker $m1$; translation and rotation axes for marker $m1$ are defined in the local body coordinate system and additionally transformed by rotationMarker1",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{m1,J1}{\\Rot}"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "axisRadius": {
            "type": "float",
            "default": "0.1f",
            "defaultStr": "\"0.1f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius of joint axis to draw",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "axisLength": {
            "type": "float",
            "default": "0.4f",
            "defaultStr": "\"0.4f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "length of joint axis to draw",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectJointSpherical": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector; $m1$ is the moving coin rigid body and $m0$ is the marker for the ground body, which use the localPosition=[0,0,0] for this marker!",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "constrainedAxes": {
            "type": "ArrayIndex",
            "default": "ArrayIndex({1,1,1})",
            "defaultStr": "\"ArrayIndex({1,1,1})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\jv=[j_0,\\,\\ldots,\\,j_2]$flag, which determines which translation (0,1,2) and rotation (3,4,5) axes are constrained; for $j_i$, two values are possible: 0=free axis, 1=constrained axis",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\jv=[j_0,\\,\\ldots,\\,j_2]"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "jointRadius": {
            "type": "float",
            "default": "0.1f",
            "defaultStr": "\"0.1f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "radius of joint to draw",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectJointRollingDisc": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$list of markers used in connector; $m0$ represents the ground and $m1$ represents the rolling body, which has its reference point (=local position [0,0,0]) at the disc center point",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "constrainedAxes": {
            "type": "ArrayIndex",
            "default": "ArrayIndex({1,1,1})",
            "defaultStr": "\"ArrayIndex({1,1,1})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\jv=[j_0,\\,\\ldots,\\,j_2]$flags, which determine which constraints are active, in which $j_0$ represents lateral motion, $j_1$ longitudinal (forward/backward) motion and $j_2$ represents the normal (contact) direction",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\jv=[j_0,\\,\\ldots,\\,j_2]"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "discRadius": {
            "type": "PReal",
            "default": 0,
            "defaultStr": "0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "defines the disc radius",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "discAxis": {
            "type": "Vector3D",
            "default": "Vector3D({1,0,0})",
            "defaultStr": "\"Vector3D({1,0,0})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{m1}{\\wv_{1}}, \\;\\; |\\LU{m1}{\\wv_{1}}| = 1$axis of disc defined in marker $m1$ frame",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{m1}{\\wv_{1}}, \\;\\; |\\LU{m1}{\\wv_{1}}| = 1"
        },
        "planeNormal": {
            "type": "Vector3D",
            "default": "Vector3D({0,0,1})",
            "defaultStr": "\"Vector3D({0,0,1})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\LU{m0}{\\vv_{PN}}$normal to the contact / rolling plane defined in marker $m0$ coordinates",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{m0}{\\vv_{PN}}"
        },
        "discWidth": {
            "type": "float",
            "default": "0.1f",
            "defaultStr": "\"0.1f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "width of disc for drawing",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectJointRevolute2D": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = radius of revolute joint; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectJointPrismatic2D": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "list of markers used in connector",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "axisMarker0": {
            "type": "Vector3D",
            "default": "Vector3D({1.,0.,0.})",
            "defaultStr": "\"Vector3D({1.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "direction of prismatic axis, given as a 3D vector in Marker0 frame",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "normalMarker1": {
            "type": "Vector3D",
            "default": "Vector3D({0.,1.,0.})",
            "defaultStr": "\"Vector3D({0.,1.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "direction of normal to prismatic axis, given as a 3D vector in Marker1 frame",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "constrainRotation": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector also constrains the relative rotation of the two objects; if set to false, the constraint will keep an algebraic equation set equal zero",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = radius of revolute joint; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectJointSliding2D": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$marker m0: position or rigid body marker of mass point or rigid body; marker m1: updated marker to Cable2D element, where the sliding joint currently is attached to; must be initialized with an appropriate (global) marker number according to the starting position of the sliding object; this marker changes with time (PostNewtonStep)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "slidingMarkerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m_{s0}, \\ldots, m_{sn}]\\tp$these markers are used to update marker m1, if the sliding position exceeds the current cable's range; the markers must be sorted such that marker $m_{si}$ at x=cable(i).length is equal to marker(i+1) at x=0 of cable(i+1)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m_{s0}, \\ldots, m_{sn}]\\tp"
        },
        "slidingMarkerOffsets": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[d_{s0}, \\ldots, d_{sn}]$this list contains the offsets of every sliding object (given by slidingMarkerNumbers) w.r.t. to the initial position (0): marker m0: offset=0, marker m1: offset=Length(cable0), marker m2: offset=Length(cable0)+Length(cable1), ...",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[d_{s0}, \\ldots, d_{sn}]"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_{GD}$node number of a NodeGenericData for 1 dataCoordinate showing the according marker number which is currently active and the start-of-step (global) sliding position",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_{GD}"
        },
        "classicalFormulation": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "True: uses a formulation with 3 (+1) equations, including the force in sliding direction to be zero; forces in global coordinates, only index 3; False: use local formulation, which only needs 2 (+1) equations and can be used with index 2 formulation",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "constrainRotation": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "True: add constraint on rotation of marker m0 relative to slope (if True, marker m0 must be a rigid body marker); False: marker m0 body can rotate freely",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "axialForce": {
            "type": "Real",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$f_\\mathrm{ax}$ONLY APPLIES if classicalFormulation==True; axialForce represents an additional sliding force acting between beam and marker m0 body in axial (beam) direction; this force can be used to drive a body on a beam, but can only be changed with user functions.",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f_\\mathrm{ax}"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = radius of revolute joint; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectJointALEMoving2D": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,\\,m1]\\tp$marker m0: position-marker of mass point or rigid body; marker m1: updated marker to ANCF Cable2D element, where the sliding joint currently is attached to; must be initialized with an appropriate (global) marker number according to the starting position of the sliding object; this marker changes with time (PostNewtonStep)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,\\,m1]\\tp"
        },
        "slidingMarkerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m_{s0}, \\ldots, m_{sn}]\\tp$a list of sn (global) marker numbers which are are used to update marker1",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m_{s0}, \\ldots, m_{sn}]\\tp"
        },
        "slidingMarkerOffsets": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[d_{s0}, \\ldots, d_{sn}]$this list contains the offsets of every sliding object (given by slidingMarkerNumbers) w.r.t. to the initial position (0): marker0: offset=0, marker1: offset=Length(cable0), marker2: offset=Length(cable0)+Length(cable1), ...",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[d_{s0}, \\ldots, d_{sn}]"
        },
        "slidingOffset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$s_{off}$sliding offset list [SI:m]: a list of sn scalar offsets, which represent the (reference arc) length of all previous sliding cable elements",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "s_{off}"
        },
        "nodeNumbers": {
            "type": "ArrayNodeIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[n_{GD}, n_{ALE}]$node number of NodeGenericData (GD) with one data coordinate and of NodeGenericODE2 (ALE) with one \\hac{ODE2} coordinate",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[n_{GD}, n_{ALE}]"
        },
        "usePenaltyFormulation": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is formulated with penalty, but still using algebraic equations (IsPenaltyConnector() still false)",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "penaltyStiffness": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k$penalty stiffness [SI:N/m] used if usePenaltyFormulation=True",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = radius of revolute joint; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerBodyMass": {
        "bodyNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "body number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerBodyPosition": {
        "bodyNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "body number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "localPosition": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\pLocB$local body position of marker; e.g. local (body-fixed) position where force is applied to",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\pLocB"
        }
    },
    "MarkerBodyRigid": {
        "bodyNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "body number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "localPosition": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\pLocB$local body position of marker; e.g. local (body-fixed) position where force is applied to",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\pLocB"
        }
    },
    "MarkerNodePosition": {
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "node number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerNodeRigid": {
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "node number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerNodeCoordinate": {
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "node number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "coordinate": {
            "type": "UInt",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "coordinate of node to which marker is attached to",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerNodeCoordinates": {
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "node number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerNodeODE1Coordinate": {
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "node number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "coordinate": {
            "type": "UInt",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "coordinate of node to which marker is attached to",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerNodeRotationCoordinate": {
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "node number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "rotationCoordinate": {
            "type": "UInt",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "rotation coordinate: 0=x, 1=y, 2=z",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerSuperElementPosition": {
        "bodyNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_b$body number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_b"
        },
        "meshNodeNumbers": {
            "type": "ArrayIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[k_0,\\,\\ldots,\\,k_{n_m-1}]\\tp$a list of $n_m$ mesh node numbers of superelement (=interface nodes) which are used to compute the body-fixed marker position; the related nodes must provide 3D position information, such as NodePoint, NodePoint2D, NodeRigidBody[..]; in order to retrieve the global node number, the generic body needs to convert local into global node numbers",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[k_0,\\,\\ldots,\\,k_{n_m-1}]\\tp"
        },
        "weightingFactors": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[w_{0},\\,\\ldots,\\,w_{n_m-1}]\\tp$a list of $n_m$ weighting factors per node to compute the final local position; the sum of these weights shall be 1, such that a summation of all nodal positions times weights gives the average position of the marker",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[w_{0},\\,\\ldots,\\,w_{n_m-1}]\\tp"
        },
        "showMarkerNodes": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "set true, if all nodes are shown (similar to marker, but with less intensity)",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerSuperElementRigid": {
        "bodyNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_b$body number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_b"
        },
        "offset": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{r}{\\ov_{ref}}$local marker SuperElement reference position offset used to correct the center point of the marker, which is computed from the weighted average of reference node positions (which may have some offset to the desired joint position). Note that this offset shall be small and larger offsets can cause instability in simulation models (better to have symmetric meshes at joints).",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{r}{\\ov_{ref}}"
        },
        "meshNodeNumbers": {
            "type": "ArrayIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[k_0,\\,\\ldots,\\,k_{n_m-1}]\\tp$a list of $n_m$ mesh node numbers of superelement (=interface nodes) which are used to compute the body-fixed marker position and orientation; the related nodes must provide 3D position information, such as NodePoint, NodePoint2D, NodeRigidBody[..]; in order to retrieve the global node number, the generic body needs to convert local into global node numbers",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[k_0,\\,\\ldots,\\,k_{n_m-1}]\\tp"
        },
        "weightingFactors": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[w_{0},\\,\\ldots,\\,w_{n_m-1}]\\tp$a list of $n_m$ weighting factors per node to compute the final local position and orientation; these factors could be based on surface integrals of the constrained mesh faces",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "[w_{0},\\,\\ldots,\\,w_{n_m-1}]\\tp"
        },
        "useAlternativeApproach": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "this flag switches between two versions for the computation of the rotation and angular velocity of the marker; alternative approach uses skew symmetric matrix of reference position; follows the inertia concept",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "rotationsExponentialMap": {
            "type": "Index",
            "default": 2,
            "defaultStr": "2",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "Experimental flag (2 is the correct value and will be used in future, removing this flag): This value switches different behavior for computation of rotations and angular velocities: 0 uses linearized rotations and angular velocities, 1 uses the exponential map for rotations but linear angular velocities, 2 uses the exponential map for rotations and the according tangent map for angular velocities",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "showMarkerNodes": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "set true, if all nodes are shown (similar to marker, but with less intensity)",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerKinematicTreeRigid": {
        "objectNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_b$body number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_b"
        },
        "linkNumber": {
            "type": "UInt",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_l$number of link in KinematicTree to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_l"
        },
        "localPosition": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{l}{\\bv}$local (link-fixed) position of marker at link $n_l$, using the link ($n_l$) coordinate system",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{l}{\\bv}"
        }
    },
    "MarkerObjectODE2Coordinates": {
        "objectNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "body number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerBodyCable2DShape": {
        "bodyNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "body number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "numberOfSegments": {
            "type": "PInt",
            "default": 3,
            "defaultStr": "3",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "number of number of segments; each segment is a line and is associated to a data (history) variable; must be same as in according contact element",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "verticalOffset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "vertical offset from beam axis in positive (local) Y-direction; this offset accounts for consistent computation of positions and velocities at the surface of the beam",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "MarkerBodyCable2DCoordinates": {
        "bodyNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "body number to which marker is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "LoadForceVector": {
        "markerNumber": {
            "type": "MarkerIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "marker's number to which load is applied",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "loadVector": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\fv$vector-valued load [SI:N]; in case of a user function, this vector is ignored",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\fv"
        },
        "bodyFixed": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if bodyFixed is true, the load is defined in body-fixed (local) coordinates, leading to a follower force; if false: global coordinates are used",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "loadVectorUserFunction": {
            "type": "PyFunctionVector3DmbsScalarVector3D",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal^3$A Python function which defines the time-dependent load and replaces loadVector; see description below; NOTE that in static computations, the loadFactor is always 1 for forces computed by user functions (this means for the static computation, that a user function returning [t*5,t*1,0] corresponds to loadVector=[5,1,0] without a user function); NOTE that forces are drawn using the value of loadVector; thus the current values according to the user function are NOT shown in the render window; however, a sensor (SensorLoad) returns the user function force which is applied to the object; to draw forces with current user function values, use a graphicsDataUserFunction of a ground object",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal^3"
        }
    },
    "LoadTorqueVector": {
        "markerNumber": {
            "type": "MarkerIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "marker's number to which load is applied",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "loadVector": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\ttau$vector-valued load [SI:N]; in case of a user function, this vector is ignored",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\ttau"
        },
        "bodyFixed": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "if bodyFixed is true, the load is defined in body-fixed (local) coordinates, leading to a follower torque; if false: global coordinates are used",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "loadVectorUserFunction": {
            "type": "PyFunctionVector3DmbsScalarVector3D",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal^3$A Python function which defines the time-dependent load and replaces loadVector; see description below; see also notes on loadFactor and drawing in LoadForceVector! Example for Python function: def f(mbs, t, loadVector): return [loadVector[0]*np.sin(t*10*2*3.1415),0,0]",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal^3"
        }
    },
    "LoadMassProportional": {
        "markerNumber": {
            "type": "MarkerIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "marker's number to which load is applied",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "loadVector": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\bv$vector-valued load [SI:N/kg = m/s$^2$]; typically, this will be the gravity vector in global coordinates; in case of a user function, this v is ignored",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\bv"
        },
        "loadVectorUserFunction": {
            "type": "PyFunctionVector3DmbsScalarVector3D",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal^3$A Python function which defines the time-dependent load; see description below; see also notes on loadFactor and drawing in LoadForceVector!",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal^3"
        }
    },
    "LoadCoordinate": {
        "markerNumber": {
            "type": "MarkerIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "marker's number to which load is applied",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "load": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$f$scalar load [SI:N]; in case of a user function, this value is ignored",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "f"
        },
        "loadUserFunction": {
            "type": "PyFunctionMbsScalar2",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "$\\mathrm{UF} \\in \\Rcal$A Python function which defines the time-dependent load and replaces the load; see description below; see also notes on loadFactor and drawing in LoadForceVector!",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathrm{UF} \\in \\Rcal"
        }
    },
    "SensorNode": {
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "node number to which sensor is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "writeToFile": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "True: write sensor output to file; flag is ignored (interpreted as False), if fileName=''",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "fileName": {
            "type": "String",
            "default": null,
            "defaultStr": "None",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "directory and file name for sensor file output; default: empty string generates sensor + sensorNumber + outputVariableType; directory will be created if it does not exist",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "outputVariableType": {
            "type": "OutputVariableType",
            "default": "OutputVariableType::_None",
            "defaultStr": "\"OutputVariableType::_None\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "OutputVariableType for sensor",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "storeInternal": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "true: store sensor data in memory (faster, but may consume large amounts of memory); false: internal storage not available",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "SensorObject": {
        "objectNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "object (e.g. connector) number to which sensor is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "writeToFile": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "True: write sensor output to file; flag is ignored (interpreted as False), if fileName=''",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "fileName": {
            "type": "String",
            "default": null,
            "defaultStr": "None",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "directory and file name for sensor file output; default: empty string generates sensor + sensorNumber + outputVariableType; directory will be created if it does not exist",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "outputVariableType": {
            "type": "OutputVariableType",
            "default": "OutputVariableType::_None",
            "defaultStr": "\"OutputVariableType::_None\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "OutputVariableType for sensor",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "storeInternal": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "true: store sensor data in memory (faster, but may consume large amounts of memory); false: internal storage not available",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "SensorBody": {
        "bodyNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "body (=object) number to which sensor is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "localPosition": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\pLocB$local (body-fixed) body position of sensor",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\pLocB"
        },
        "writeToFile": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "True: write sensor output to file; flag is ignored (interpreted as False), if fileName=''",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "fileName": {
            "type": "String",
            "default": null,
            "defaultStr": "None",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "directory and file name for sensor file output; default: empty string generates sensor + sensorNumber + outputVariableType; directory will be created if it does not exist",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "outputVariableType": {
            "type": "OutputVariableType",
            "default": "OutputVariableType::_None",
            "defaultStr": "\"OutputVariableType::_None\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "OutputVariableType for sensor",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "storeInternal": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "true: store sensor data in memory (faster, but may consume large amounts of memory); false: internal storage not available",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "SensorSuperElement": {
        "bodyNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "body (=object) number to which sensor is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "meshNodeNumber": {
            "type": "UInt",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "mesh node number, which is a local node number with in the object (starting with 0); the node number may represent a real Node in mbs, or may be virtual and reconstructed from the object coordinates such as in ObjectFFRFreducedOrder",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "writeToFile": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "True: write sensor output to file; flag is ignored (interpreted as False), if fileName=''",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "fileName": {
            "type": "String",
            "default": null,
            "defaultStr": "None",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "directory and file name for sensor file output; default: empty string generates sensor + sensorNumber + outputVariableType; directory will be created if it does not exist",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "outputVariableType": {
            "type": "OutputVariableType",
            "default": "OutputVariableType::_None",
            "defaultStr": "\"OutputVariableType::_None\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "OutputVariableType for sensor, based on the output variables available for the mesh nodes (see special section for super element output variables, e.g, in ObjectFFRFreducedOrder, \\refSection{sec:objectffrfreducedorder:superelementoutput})",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "storeInternal": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "true: store sensor data in memory (faster, but may consume large amounts of memory); false: internal storage not available",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "SensorKinematicTree": {
        "objectNumber": {
            "type": "ObjectIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "object number of KinematicTree to which sensor is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "linkNumber": {
            "type": "UInt",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_l$number of link in KinematicTree to measure quantities",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_l"
        },
        "localPosition": {
            "type": "Vector3D",
            "default": "Vector3D({0.,0.,0.})",
            "defaultStr": "\"Vector3D({0.,0.,0.})\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\LU{l}{\\bv}$local (link-fixed) position of sensor, defined in link ($n_l$) coordinate system",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\LU{l}{\\bv}"
        },
        "writeToFile": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "True: write sensor output to file; flag is ignored (interpreted as False), if fileName=''",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "fileName": {
            "type": "String",
            "default": null,
            "defaultStr": "None",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "directory and file name for sensor file output; default: empty string generates sensor + sensorNumber + outputVariableType; directory will be created if it does not exist",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "outputVariableType": {
            "type": "OutputVariableType",
            "default": "OutputVariableType::_None",
            "defaultStr": "\"OutputVariableType::_None\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "OutputVariableType for sensor",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "storeInternal": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "true: store sensor data in memory (faster, but may consume large amounts of memory); false: internal storage not available",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "SensorMarker": {
        "markerNumber": {
            "type": "MarkerIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "marker number to which sensor is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "writeToFile": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "True: write sensor output to file; flag is ignored (interpreted as False), if fileName=''",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "fileName": {
            "type": "String",
            "default": null,
            "defaultStr": "None",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "directory and file name for sensor file output; default: empty string generates sensor + sensorNumber + outputVariableType; directory will be created if it does not exist",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "outputVariableType": {
            "type": "OutputVariableType",
            "default": "OutputVariableType::_None",
            "defaultStr": "\"OutputVariableType::_None\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "OutputVariableType for sensor; output variables are only possible according to markertype, see general description of SensorMarker",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "storeInternal": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "true: store sensor data in memory (faster, but may consume large amounts of memory); false: internal storage not available",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "SensorLoad": {
        "loadNumber": {
            "type": "LoadIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "load number to which sensor is attached to",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": null
        },
        "writeToFile": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "True: write sensor output to file; flag is ignored (interpreted as False), if fileName=''",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "fileName": {
            "type": "String",
            "default": null,
            "defaultStr": "None",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "directory and file name for sensor file output; default: empty string generates sensor + sensorNumber + outputVariableType; directory will be created if it does not exist",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "storeInternal": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "true: store sensor data in memory (faster, but may consume large amounts of memory); false: internal storage not available",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "SensorUserFunction": {
        "sensorNumbers": {
            "type": "ArraySensorIndex",
            "default": "ArrayIndex()",
            "defaultStr": "\"ArrayIndex()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mathbf{n}_s = [s_0,\\,\\ldots,\\,s_n]\\tp$optional list of $n$ sensor numbers for use in user function",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "\\mathbf{n}_s = [s_0,\\,\\ldots,\\,s_n]\\tp"
        },
        "factors": {
            "type": "Vector",
            "default": "Vector()",
            "defaultStr": "\"Vector()\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mathbf{f}_s = [f_0,\\,\\ldots,\\,f_m]\\tp$optional list of $m$ factors which can be used, e.g., for weighting sensor values",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mathbf{f}_s = [f_0,\\,\\ldots,\\,f_m]\\tp"
        },
        "writeToFile": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "True: write sensor output to file; flag is ignored (interpreted as False), if fileName=''",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "fileName": {
            "type": "String",
            "default": null,
            "defaultStr": "None",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "directory and file name for sensor file output; default: empty string generates sensor + sensorNumber + outputVariableType; directory will be created if it does not exist",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "sensorUserFunction": {
            "type": "PyFunctionVectorMbsScalarArrayIndexVectorConfiguration",
            "default": 0,
            "defaultStr": "0",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "A Python function which defines the time-dependent user function, which usually evaluates one or several sensors and computes a new sensor value, see example",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "storeInternal": {
            "type": "Bool",
            "default": "false",
            "defaultStr": "\"false\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "true: store sensor data in memory (faster, but may consume large amounts of memory); false: internal storage not available",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    },
    "ObjectContactFrictionCircleCable2DOld": {
        "markerNumbers": {
            "type": "ArrayMarkerIndex",
            "default": "ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })",
            "defaultStr": "\"ArrayIndex({ EXUstd::InvalidIndex, EXUstd::InvalidIndex })\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$[m0,m1]\\tp$markers define contact gap",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "[m0,m1]\\tp"
        },
        "nodeNumber": {
            "type": "NodeIndex",
            "default": "EXUstd::InvalidIndex",
            "defaultStr": "\"EXUstd::InvalidIndex\"",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_g$node number of a NodeGenericData with 3 $\\times n_{cs}$  dataCoordinates (used for active set strategy $\\ra$ hold the gap of the last discontinuous iteration and the friction state)",
            "destination": "CP",
            "isIndex": true,
            "isUserFunction": false,
            "symbol": "n_g"
        },
        "numberOfContactSegments": {
            "type": "PInt",
            "default": 3,
            "defaultStr": "3",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$n_{cs}$number of linear contact segments to determine contact; each segment is a line and is associated to a data (history) variable; must be same as in according marker",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "n_{cs}"
        },
        "contactStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$k_c$contact (penalty) stiffness [SI:N/m/(contact segment)]; the stiffness is per contact segment; specific contact forces (per length) $f_n$ act in contact normal direction only upon penetration",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "k_c"
        },
        "contactDamping": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$d_c$contact damping [SI:N/(m s)/(contact segment)]; the damping is per contact segment; acts in contact normal direction only upon penetration",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "d_c"
        },
        "frictionVelocityPenalty": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mu_v$velocity dependent penalty coefficient for friction [SI:N/(m s)/(contact segment)]; the coefficient causes tangential (contact) forces against relative tangential velocities in the contact area",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu_v"
        },
        "frictionStiffness": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mu_k$CURRENTLY NOT IMPLEMENTED: displacement dependent penalty/stiffness coefficient for friction [SI:N/m/(contact segment)]; the coefficient causes tangential (contact) forces against relative tangential displacements in the contact area",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu_k"
        },
        "frictionCoefficient": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$\\mu$friction coefficient [SI: 1]; tangential specific friction forces (per length) $f_t$ must fulfill the condition $f_t \\le \\mu f_n$",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "\\mu"
        },
        "circleRadius": {
            "type": "UReal",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$r$radius [SI:m] of contact circle",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "r"
        },
        "offset": {
            "type": "Real",
            "default": 0.0,
            "defaultStr": "0.0",
            "required": true,
            "optional": false,
            "readOnly": false,
            "description": "$h_o$offset [SI:m] of contact, e.g. to include thickness of cable element",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": "h_o"
        },
        "activeConnector": {
            "type": "Bool",
            "default": "true",
            "defaultStr": "\"true\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "flag, which determines, if the connector is active; used to deactivate (temporarily) a connector or constraint",
            "destination": "CP",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "drawSize": {
            "type": "float",
            "default": "-1.f",
            "defaultStr": "\"-1.f\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "drawing size = diameter of spring; size == -1.f means that default connector size is used",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        },
        "color": {
            "type": "Float4",
            "default": "Float4({-1.f,-1.f,-1.f,-1.f})",
            "defaultStr": "\"Float4({-1.f,-1.f,-1.f,-1.f})\"",
            "required": false,
            "optional": true,
            "readOnly": false,
            "description": "RGBA connector color; if R==-1, use default color",
            "destination": "V",
            "isIndex": false,
            "isUserFunction": false,
            "symbol": null
        }
    }
}